// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers
    /// (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure
    /// and manage connections to be used with your clients and users.
    /// 
    /// ## Import
    /// 
    /// Connections can be imported using their id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import auth0:index/connection:Connection google con_a17f21fdb24d48a0
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name used in login screen
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// IDs of the clients for which the connection is enabled. If not specified, no clients are enabled.
        /// </summary>
        [Output("enabledClients")]
        public Output<ImmutableArray<string>> EnabledClients { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Output("isDomainConnection")]
        public Output<bool> IsDomainConnection { get; private set; } = null!;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration settings for connection options. For details, see Options.
        /// </summary>
        [Output("options")]
        public Output<Outputs.ConnectionOptions> Options { get; private set; } = null!;

        /// <summary>
        /// Defines the realms for which the connection will be used (i.e., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        [Output("realms")]
        public Output<ImmutableArray<string>> Realms { get; private set; } = null!;

        /// <summary>
        /// Display connection as a button. Only available for enterprise connections.
        /// </summary>
        [Output("showAsButton")]
        public Output<bool?> ShowAsButton { get; private set; } = null!;

        /// <summary>
        /// Type of the connection, which indicates the identity provider. Options include `ad`, `adfs`, `amazon`, `aol`, `apple`, `auth0`, `auth0-adldap`, `auth0-oidc`, `baidu`, `bitbucket`, `bitly`, `box`, `custom`, `daccount`, `dropbox`, `dwolla`, `email`, `evernote`, `evernote-sandbox`, `exact`, `facebook`, `fitbit`, `flickr`, `github`, `google-apps`, `google-oauth2`, `guardian`, `instagram`, `ip`, `line`, `linkedin`, `miicard`, `oauth1`, `oauth2`, `office365`, `oidc`, `paypal`, `paypal-sandbox`, `pingfederate`, `planningcenter`, `renren`, `salesforce`, `salesforce-community`, `salesforce-sandbox` `samlp`, `sharepoint`, `shopify`, `sms`, `soundcloud`, `thecity`, `thecity-sandbox`, `thirtysevensignals`, `twitter`, `untappd`, `vkontakte`, `waad`, `weibo`, `windowslive`, `wordpress`, `yahoo`, `yammer`, `yandex`.
        /// </summary>
        [Output("strategy")]
        public Output<string> Strategy { get; private set; } = null!;

        /// <summary>
        /// Version 1 is deprecated, use version 2.
        /// </summary>
        [Output("strategyVersion")]
        public Output<string> StrategyVersion { get; private set; } = null!;

        /// <summary>
        /// Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
        /// </summary>
        [Output("validation")]
        public Output<ImmutableDictionary<string, string>?> Validation { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used in login screen
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("enabledClients")]
        private InputList<string>? _enabledClients;

        /// <summary>
        /// IDs of the clients for which the connection is enabled. If not specified, no clients are enabled.
        /// </summary>
        public InputList<string> EnabledClients
        {
            get => _enabledClients ?? (_enabledClients = new InputList<string>());
            set => _enabledClients = value;
        }

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Input("isDomainConnection")]
        public Input<bool>? IsDomainConnection { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration settings for connection options. For details, see Options.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ConnectionOptionsArgs>? Options { get; set; }

        [Input("realms")]
        private InputList<string>? _realms;

        /// <summary>
        /// Defines the realms for which the connection will be used (i.e., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        /// <summary>
        /// Display connection as a button. Only available for enterprise connections.
        /// </summary>
        [Input("showAsButton")]
        public Input<bool>? ShowAsButton { get; set; }

        /// <summary>
        /// Type of the connection, which indicates the identity provider. Options include `ad`, `adfs`, `amazon`, `aol`, `apple`, `auth0`, `auth0-adldap`, `auth0-oidc`, `baidu`, `bitbucket`, `bitly`, `box`, `custom`, `daccount`, `dropbox`, `dwolla`, `email`, `evernote`, `evernote-sandbox`, `exact`, `facebook`, `fitbit`, `flickr`, `github`, `google-apps`, `google-oauth2`, `guardian`, `instagram`, `ip`, `line`, `linkedin`, `miicard`, `oauth1`, `oauth2`, `office365`, `oidc`, `paypal`, `paypal-sandbox`, `pingfederate`, `planningcenter`, `renren`, `salesforce`, `salesforce-community`, `salesforce-sandbox` `samlp`, `sharepoint`, `shopify`, `sms`, `soundcloud`, `thecity`, `thecity-sandbox`, `thirtysevensignals`, `twitter`, `untappd`, `vkontakte`, `waad`, `weibo`, `windowslive`, `wordpress`, `yahoo`, `yammer`, `yandex`.
        /// </summary>
        [Input("strategy", required: true)]
        public Input<string> Strategy { get; set; } = null!;

        /// <summary>
        /// Version 1 is deprecated, use version 2.
        /// </summary>
        [Input("strategyVersion")]
        public Input<string>? StrategyVersion { get; set; }

        [Input("validation")]
        private InputMap<string>? _validation;

        /// <summary>
        /// Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
        /// </summary>
        public InputMap<string> Validation
        {
            get => _validation ?? (_validation = new InputMap<string>());
            set => _validation = value;
        }

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used in login screen
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("enabledClients")]
        private InputList<string>? _enabledClients;

        /// <summary>
        /// IDs of the clients for which the connection is enabled. If not specified, no clients are enabled.
        /// </summary>
        public InputList<string> EnabledClients
        {
            get => _enabledClients ?? (_enabledClients = new InputList<string>());
            set => _enabledClients = value;
        }

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Input("isDomainConnection")]
        public Input<bool>? IsDomainConnection { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration settings for connection options. For details, see Options.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ConnectionOptionsGetArgs>? Options { get; set; }

        [Input("realms")]
        private InputList<string>? _realms;

        /// <summary>
        /// Defines the realms for which the connection will be used (i.e., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        /// <summary>
        /// Display connection as a button. Only available for enterprise connections.
        /// </summary>
        [Input("showAsButton")]
        public Input<bool>? ShowAsButton { get; set; }

        /// <summary>
        /// Type of the connection, which indicates the identity provider. Options include `ad`, `adfs`, `amazon`, `aol`, `apple`, `auth0`, `auth0-adldap`, `auth0-oidc`, `baidu`, `bitbucket`, `bitly`, `box`, `custom`, `daccount`, `dropbox`, `dwolla`, `email`, `evernote`, `evernote-sandbox`, `exact`, `facebook`, `fitbit`, `flickr`, `github`, `google-apps`, `google-oauth2`, `guardian`, `instagram`, `ip`, `line`, `linkedin`, `miicard`, `oauth1`, `oauth2`, `office365`, `oidc`, `paypal`, `paypal-sandbox`, `pingfederate`, `planningcenter`, `renren`, `salesforce`, `salesforce-community`, `salesforce-sandbox` `samlp`, `sharepoint`, `shopify`, `sms`, `soundcloud`, `thecity`, `thecity-sandbox`, `thirtysevensignals`, `twitter`, `untappd`, `vkontakte`, `waad`, `weibo`, `windowslive`, `wordpress`, `yahoo`, `yammer`, `yandex`.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        /// <summary>
        /// Version 1 is deprecated, use version 2.
        /// </summary>
        [Input("strategyVersion")]
        public Input<string>? StrategyVersion { get; set; }

        [Input("validation")]
        private InputMap<string>? _validation;

        /// <summary>
        /// Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
        /// </summary>
        public InputMap<string> Validation
        {
            get => _validation ?? (_validation = new InputMap<string>());
            set => _validation = value;
        }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
