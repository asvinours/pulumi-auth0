// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Outputs
{

    [OutputType]
    public sealed class ConnectionOptions
    {
        /// <summary>
        /// String. ADFS Metadata source.
        /// </summary>
        public readonly string? AdfsServer;
        public readonly ImmutableArray<string> AllowedAudiences;
        /// <summary>
        /// Boolean.
        /// </summary>
        public readonly bool? ApiEnableUsers;
        /// <summary>
        /// String. Azure AD domain name.
        /// </summary>
        public readonly string? AppDomain;
        /// <summary>
        /// String
        /// </summary>
        public readonly string? AppId;
        /// <summary>
        /// Boolean. Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
        /// </summary>
        public readonly bool? BruteForceProtection;
        /// <summary>
        /// String. Client ID for your Azure AD application.
        /// </summary>
        public readonly string? ClientId;
        /// <summary>
        /// String, Case-sensitive. Client secret for your Azure AD application.
        /// </summary>
        public readonly string? ClientSecret;
        /// <summary>
        /// String.
        /// </summary>
        public readonly string? CommunityBaseUrl;
        /// <summary>
        /// Map(String), Case-sensitive.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Configuration;
        /// <summary>
        /// Map(String). 
        /// </summary>
        public readonly ImmutableDictionary<string, string>? CustomScripts;
        public readonly bool? DisableCache;
        /// <summary>
        /// Boolean. Indicates whether or not to allow user sign-ups to your application.
        /// </summary>
        public readonly bool? DisableSignup;
        public readonly string? Domain;
        /// <summary>
        /// List(String). List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
        /// </summary>
        public readonly ImmutableArray<string> DomainAliases;
        /// <summary>
        /// Boolean.
        /// </summary>
        public readonly bool? EnabledDatabaseCustomization;
        /// <summary>
        /// String. SMS number for the sender. Used when SMS Source is From.
        /// </summary>
        public readonly string? From;
        public readonly string? IconUrl;
        public readonly string? IdentityApi;
        /// <summary>
        /// Boolean. Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
        /// </summary>
        public readonly bool? ImportMode;
        public readonly ImmutableArray<string> Ips;
        /// <summary>
        /// String. Maximum number of groups to retrieve.
        /// </summary>
        public readonly string? MaxGroupsToRetrieve;
        /// <summary>
        /// String. SID for Copilot. Used when SMS Source is Copilot.
        /// </summary>
        public readonly string? MessagingServiceSid;
        /// <summary>
        /// String. 
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// List(Resource). Configuration settings for password complexity. For details, see Password Complexity Options.
        /// </summary>
        public readonly Outputs.ConnectionOptionsPasswordComplexityOptions? PasswordComplexityOptions;
        /// <summary>
        /// List(Resource). Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
        /// </summary>
        public readonly Outputs.ConnectionOptionsPasswordDictionary? PasswordDictionary;
        /// <summary>
        /// List(Resource). Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectionOptionsPasswordHistory> PasswordHistories;
        /// <summary>
        /// List(Resource). Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user's email, or firstpart of the user's email. For details, see Password No Personal Info.
        /// </summary>
        public readonly Outputs.ConnectionOptionsPasswordNoPersonalInfo? PasswordNoPersonalInfo;
        /// <summary>
        /// String. Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
        /// </summary>
        public readonly string? PasswordPolicy;
        /// <summary>
        /// Boolean. Indicates whether or not the user is required to provide a username in addition to an email address.
        /// </summary>
        public readonly bool? RequiresUsername;
        public readonly ImmutableArray<string> Scopes;
        public readonly string? StrategyVersion;
        public readonly string? Subject;
        /// <summary>
        /// String. Syntax of the SMS. Options include `markdown` and `liquid`.
        /// </summary>
        public readonly string? Syntax;
        /// <summary>
        /// String. Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
        /// </summary>
        public readonly string? Template;
        /// <summary>
        /// String
        /// </summary>
        public readonly string? TenantDomain;
        /// <summary>
        /// Map(Resource). Configuration options for one-time passwords. For details, see TOTP.
        /// </summary>
        public readonly Outputs.ConnectionOptionsTotp? Totp;
        /// <summary>
        /// String. SID for your Twilio account.
        /// </summary>
        public readonly string? TwilioSid;
        /// <summary>
        /// String, Case-sensitive. AuthToken for your Twilio account.
        /// </summary>
        public readonly string? TwilioToken;
        public readonly bool? UseCertAuth;
        public readonly bool? UseKerberos;
        /// <summary>
        /// Bool
        /// </summary>
        public readonly bool? UseWsfed;
        /// <summary>
        /// String.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Validation;
        /// <summary>
        /// Boolean. Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
        /// </summary>
        public readonly bool? WaadCommonEndpoint;
        /// <summary>
        /// String
        /// </summary>
        public readonly string? WaadProtocol;

        [OutputConstructor]
        private ConnectionOptions(
            string? adfsServer,

            ImmutableArray<string> allowedAudiences,

            bool? apiEnableUsers,

            string? appDomain,

            string? appId,

            bool? bruteForceProtection,

            string? clientId,

            string? clientSecret,

            string? communityBaseUrl,

            ImmutableDictionary<string, string>? configuration,

            ImmutableDictionary<string, string>? customScripts,

            bool? disableCache,

            bool? disableSignup,

            string? domain,

            ImmutableArray<string> domainAliases,

            bool? enabledDatabaseCustomization,

            string? from,

            string? iconUrl,

            string? identityApi,

            bool? importMode,

            ImmutableArray<string> ips,

            string? maxGroupsToRetrieve,

            string? messagingServiceSid,

            string? name,

            Outputs.ConnectionOptionsPasswordComplexityOptions? passwordComplexityOptions,

            Outputs.ConnectionOptionsPasswordDictionary? passwordDictionary,

            ImmutableArray<Outputs.ConnectionOptionsPasswordHistory> passwordHistories,

            Outputs.ConnectionOptionsPasswordNoPersonalInfo? passwordNoPersonalInfo,

            string? passwordPolicy,

            bool? requiresUsername,

            ImmutableArray<string> scopes,

            string? strategyVersion,

            string? subject,

            string? syntax,

            string? template,

            string? tenantDomain,

            Outputs.ConnectionOptionsTotp? totp,

            string? twilioSid,

            string? twilioToken,

            bool? useCertAuth,

            bool? useKerberos,

            bool? useWsfed,

            ImmutableDictionary<string, string>? validation,

            bool? waadCommonEndpoint,

            string? waadProtocol)
        {
            AdfsServer = adfsServer;
            AllowedAudiences = allowedAudiences;
            ApiEnableUsers = apiEnableUsers;
            AppDomain = appDomain;
            AppId = appId;
            BruteForceProtection = bruteForceProtection;
            ClientId = clientId;
            ClientSecret = clientSecret;
            CommunityBaseUrl = communityBaseUrl;
            Configuration = configuration;
            CustomScripts = customScripts;
            DisableCache = disableCache;
            DisableSignup = disableSignup;
            Domain = domain;
            DomainAliases = domainAliases;
            EnabledDatabaseCustomization = enabledDatabaseCustomization;
            From = from;
            IconUrl = iconUrl;
            IdentityApi = identityApi;
            ImportMode = importMode;
            Ips = ips;
            MaxGroupsToRetrieve = maxGroupsToRetrieve;
            MessagingServiceSid = messagingServiceSid;
            Name = name;
            PasswordComplexityOptions = passwordComplexityOptions;
            PasswordDictionary = passwordDictionary;
            PasswordHistories = passwordHistories;
            PasswordNoPersonalInfo = passwordNoPersonalInfo;
            PasswordPolicy = passwordPolicy;
            RequiresUsername = requiresUsername;
            Scopes = scopes;
            StrategyVersion = strategyVersion;
            Subject = subject;
            Syntax = syntax;
            Template = template;
            TenantDomain = tenantDomain;
            Totp = totp;
            TwilioSid = twilioSid;
            TwilioToken = twilioToken;
            UseCertAuth = useCertAuth;
            UseKerberos = useKerberos;
            UseWsfed = useWsfed;
            Validation = validation;
            WaadCommonEndpoint = waadCommonEndpoint;
            WaadProtocol = waadProtocol;
        }
    }
}
