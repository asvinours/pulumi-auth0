// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// This resource is used to manage the assignment of members and their roles within an organization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var acmeAdmin = new Auth0.OrganizationMember("acmeAdmin", new Auth0.OrganizationMemberArgs
    ///         {
    ///             OrganizationId = auth0_organization.Acme.Id,
    ///             UserId = auth0_user.Acme_user.Id,
    ///             Roles = 
    ///             {
    ///                 auth0_role.Admin.Id,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// As this is not a resource identifiable by an ID within the Auth0 Management API, organization_connection can be imported using a random string. We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) e.g.
    /// 
    /// ```sh
    ///  $ pulumi import auth0:index/organizationMember:OrganizationMember acme_admin 11f4a21b-011a-312d-9217-e291caca36c5
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/organizationMember:OrganizationMember")]
    public partial class OrganizationMember : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the organization
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Set(string). List of role IDs to assign to member.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<string>> Roles { get; private set; } = null!;

        /// <summary>
        /// The user ID of the member
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationMember resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationMember(string name, OrganizationMemberArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/organizationMember:OrganizationMember", name, args ?? new OrganizationMemberArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationMember(string name, Input<string> id, OrganizationMemberState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/organizationMember:OrganizationMember", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationMember resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationMember Get(string name, Input<string> id, OrganizationMemberState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationMember(name, id, state, options);
        }
    }

    public sealed class OrganizationMemberArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the organization
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// Set(string). List of role IDs to assign to member.
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        /// <summary>
        /// The user ID of the member
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public OrganizationMemberArgs()
        {
        }
    }

    public sealed class OrganizationMemberState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the organization
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// Set(string). List of role IDs to assign to member.
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        /// <summary>
        /// The user ID of the member
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public OrganizationMemberState()
        {
        }
    }
}
