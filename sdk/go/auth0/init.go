// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "auth0:index/client:Client":
		r, err = NewClient(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/clientGrant:ClientGrant":
		r, err = NewClientGrant(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/connection:Connection":
		r, err = NewConnection(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/customDomain:CustomDomain":
		r, err = NewCustomDomain(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/email:Email":
		r, err = NewEmail(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/emailTemplate:EmailTemplate":
		r, err = NewEmailTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/globalClient:GlobalClient":
		r, err = NewGlobalClient(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/hook:Hook":
		r, err = NewHook(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/logStream:LogStream":
		r, err = NewLogStream(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/prompt:Prompt":
		r, err = NewPrompt(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/resourceServer:ResourceServer":
		r, err = NewResourceServer(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/role:Role":
		r, err = NewRole(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/rule:Rule":
		r, err = NewRule(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/ruleConfig:RuleConfig":
		r, err = NewRuleConfig(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/tenant:Tenant":
		r, err = NewTenant(ctx, name, nil, pulumi.URN_(urn))
	case "auth0:index/user:User":
		r, err = NewUser(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:auth0" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"auth0",
		"index/client",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/clientGrant",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/connection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/customDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/email",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/emailTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/globalClient",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/hook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/logStream",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/prompt",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/resourceServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/role",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/rule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/ruleConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/tenant",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"auth0",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"auth0",
		&pkg{version},
	)
}
