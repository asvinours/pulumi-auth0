// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LogStream struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
	Sink LogStreamSinkOutput `pulumi:"sink"`
	// Status of the LogStream
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of the log stream, which indicates the sink provider
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLogStream registers a new resource with the given unique name, arguments, and options.
func NewLogStream(ctx *pulumi.Context,
	name string, args *LogStreamArgs, opts ...pulumi.ResourceOption) (*LogStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sink == nil {
		return nil, errors.New("invalid value for required argument 'Sink'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource LogStream
	err := ctx.RegisterResource("auth0:index/logStream:LogStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogStream gets an existing LogStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogStreamState, opts ...pulumi.ResourceOption) (*LogStream, error) {
	var resource LogStream
	err := ctx.ReadResource("auth0:index/logStream:LogStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogStream resources.
type logStreamState struct {
	Name *string        `pulumi:"name"`
	Sink *LogStreamSink `pulumi:"sink"`
	// Status of the LogStream
	Status *string `pulumi:"status"`
	// Type of the log stream, which indicates the sink provider
	Type *string `pulumi:"type"`
}

type LogStreamState struct {
	Name pulumi.StringPtrInput
	Sink LogStreamSinkPtrInput
	// Status of the LogStream
	Status pulumi.StringPtrInput
	// Type of the log stream, which indicates the sink provider
	Type pulumi.StringPtrInput
}

func (LogStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*logStreamState)(nil)).Elem()
}

type logStreamArgs struct {
	Name *string       `pulumi:"name"`
	Sink LogStreamSink `pulumi:"sink"`
	// Status of the LogStream
	Status *string `pulumi:"status"`
	// Type of the log stream, which indicates the sink provider
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a LogStream resource.
type LogStreamArgs struct {
	Name pulumi.StringPtrInput
	Sink LogStreamSinkInput
	// Status of the LogStream
	Status pulumi.StringPtrInput
	// Type of the log stream, which indicates the sink provider
	Type pulumi.StringInput
}

func (LogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logStreamArgs)(nil)).Elem()
}

type LogStreamInput interface {
	pulumi.Input

	ToLogStreamOutput() LogStreamOutput
	ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput
}

func (*LogStream) ElementType() reflect.Type {
	return reflect.TypeOf((*LogStream)(nil))
}

func (i *LogStream) ToLogStreamOutput() LogStreamOutput {
	return i.ToLogStreamOutputWithContext(context.Background())
}

func (i *LogStream) ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStreamOutput)
}

func (i *LogStream) ToLogStreamPtrOutput() LogStreamPtrOutput {
	return i.ToLogStreamPtrOutputWithContext(context.Background())
}

func (i *LogStream) ToLogStreamPtrOutputWithContext(ctx context.Context) LogStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStreamPtrOutput)
}

type LogStreamPtrInput interface {
	pulumi.Input

	ToLogStreamPtrOutput() LogStreamPtrOutput
	ToLogStreamPtrOutputWithContext(ctx context.Context) LogStreamPtrOutput
}

type logStreamPtrType LogStreamArgs

func (*logStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogStream)(nil))
}

func (i *logStreamPtrType) ToLogStreamPtrOutput() LogStreamPtrOutput {
	return i.ToLogStreamPtrOutputWithContext(context.Background())
}

func (i *logStreamPtrType) ToLogStreamPtrOutputWithContext(ctx context.Context) LogStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStreamPtrOutput)
}

// LogStreamArrayInput is an input type that accepts LogStreamArray and LogStreamArrayOutput values.
// You can construct a concrete instance of `LogStreamArrayInput` via:
//
//          LogStreamArray{ LogStreamArgs{...} }
type LogStreamArrayInput interface {
	pulumi.Input

	ToLogStreamArrayOutput() LogStreamArrayOutput
	ToLogStreamArrayOutputWithContext(context.Context) LogStreamArrayOutput
}

type LogStreamArray []LogStreamInput

func (LogStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LogStream)(nil))
}

func (i LogStreamArray) ToLogStreamArrayOutput() LogStreamArrayOutput {
	return i.ToLogStreamArrayOutputWithContext(context.Background())
}

func (i LogStreamArray) ToLogStreamArrayOutputWithContext(ctx context.Context) LogStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStreamArrayOutput)
}

// LogStreamMapInput is an input type that accepts LogStreamMap and LogStreamMapOutput values.
// You can construct a concrete instance of `LogStreamMapInput` via:
//
//          LogStreamMap{ "key": LogStreamArgs{...} }
type LogStreamMapInput interface {
	pulumi.Input

	ToLogStreamMapOutput() LogStreamMapOutput
	ToLogStreamMapOutputWithContext(context.Context) LogStreamMapOutput
}

type LogStreamMap map[string]LogStreamInput

func (LogStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LogStream)(nil))
}

func (i LogStreamMap) ToLogStreamMapOutput() LogStreamMapOutput {
	return i.ToLogStreamMapOutputWithContext(context.Background())
}

func (i LogStreamMap) ToLogStreamMapOutputWithContext(ctx context.Context) LogStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStreamMapOutput)
}

type LogStreamOutput struct {
	*pulumi.OutputState
}

func (LogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogStream)(nil))
}

func (o LogStreamOutput) ToLogStreamOutput() LogStreamOutput {
	return o
}

func (o LogStreamOutput) ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput {
	return o
}

func (o LogStreamOutput) ToLogStreamPtrOutput() LogStreamPtrOutput {
	return o.ToLogStreamPtrOutputWithContext(context.Background())
}

func (o LogStreamOutput) ToLogStreamPtrOutputWithContext(ctx context.Context) LogStreamPtrOutput {
	return o.ApplyT(func(v LogStream) *LogStream {
		return &v
	}).(LogStreamPtrOutput)
}

type LogStreamPtrOutput struct {
	*pulumi.OutputState
}

func (LogStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogStream)(nil))
}

func (o LogStreamPtrOutput) ToLogStreamPtrOutput() LogStreamPtrOutput {
	return o
}

func (o LogStreamPtrOutput) ToLogStreamPtrOutputWithContext(ctx context.Context) LogStreamPtrOutput {
	return o
}

type LogStreamArrayOutput struct{ *pulumi.OutputState }

func (LogStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogStream)(nil))
}

func (o LogStreamArrayOutput) ToLogStreamArrayOutput() LogStreamArrayOutput {
	return o
}

func (o LogStreamArrayOutput) ToLogStreamArrayOutputWithContext(ctx context.Context) LogStreamArrayOutput {
	return o
}

func (o LogStreamArrayOutput) Index(i pulumi.IntInput) LogStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogStream {
		return vs[0].([]LogStream)[vs[1].(int)]
	}).(LogStreamOutput)
}

type LogStreamMapOutput struct{ *pulumi.OutputState }

func (LogStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LogStream)(nil))
}

func (o LogStreamMapOutput) ToLogStreamMapOutput() LogStreamMapOutput {
	return o
}

func (o LogStreamMapOutput) ToLogStreamMapOutputWithContext(ctx context.Context) LogStreamMapOutput {
	return o
}

func (o LogStreamMapOutput) MapIndex(k pulumi.StringInput) LogStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LogStream {
		return vs[0].(map[string]LogStream)[vs[1].(string)]
	}).(LogStreamOutput)
}

func init() {
	pulumi.RegisterOutputType(LogStreamOutput{})
	pulumi.RegisterOutputType(LogStreamPtrOutput{})
	pulumi.RegisterOutputType(LogStreamArrayOutput{})
	pulumi.RegisterOutputType(LogStreamMapOutput{})
}
