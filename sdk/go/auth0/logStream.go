// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LogStream struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
	Sink LogStreamSinkOutput `pulumi:"sink"`
	// Status of the LogStream
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of the log stream, which indicates the sink provider
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLogStream registers a new resource with the given unique name, arguments, and options.
func NewLogStream(ctx *pulumi.Context,
	name string, args *LogStreamArgs, opts ...pulumi.ResourceOption) (*LogStream, error) {
	if args == nil || args.Sink == nil {
		return nil, errors.New("missing required argument 'Sink'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &LogStreamArgs{}
	}
	var resource LogStream
	err := ctx.RegisterResource("auth0:index/logStream:LogStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogStream gets an existing LogStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogStreamState, opts ...pulumi.ResourceOption) (*LogStream, error) {
	var resource LogStream
	err := ctx.ReadResource("auth0:index/logStream:LogStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogStream resources.
type logStreamState struct {
	Name *string        `pulumi:"name"`
	Sink *LogStreamSink `pulumi:"sink"`
	// Status of the LogStream
	Status *string `pulumi:"status"`
	// Type of the log stream, which indicates the sink provider
	Type *string `pulumi:"type"`
}

type LogStreamState struct {
	Name pulumi.StringPtrInput
	Sink LogStreamSinkPtrInput
	// Status of the LogStream
	Status pulumi.StringPtrInput
	// Type of the log stream, which indicates the sink provider
	Type pulumi.StringPtrInput
}

func (LogStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*logStreamState)(nil)).Elem()
}

type logStreamArgs struct {
	Name *string       `pulumi:"name"`
	Sink LogStreamSink `pulumi:"sink"`
	// Status of the LogStream
	Status *string `pulumi:"status"`
	// Type of the log stream, which indicates the sink provider
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a LogStream resource.
type LogStreamArgs struct {
	Name pulumi.StringPtrInput
	Sink LogStreamSinkInput
	// Status of the LogStream
	Status pulumi.StringPtrInput
	// Type of the log stream, which indicates the sink provider
	Type pulumi.StringInput
}

func (LogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logStreamArgs)(nil)).Elem()
}

type LogStreamInput interface {
	pulumi.Input

	ToLogStreamOutput() LogStreamOutput
	ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput
}

func (LogStream) ElementType() reflect.Type {
	return reflect.TypeOf((*LogStream)(nil)).Elem()
}

func (i LogStream) ToLogStreamOutput() LogStreamOutput {
	return i.ToLogStreamOutputWithContext(context.Background())
}

func (i LogStream) ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStreamOutput)
}

type LogStreamOutput struct {
	*pulumi.OutputState
}

func (LogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogStreamOutput)(nil)).Elem()
}

func (o LogStreamOutput) ToLogStreamOutput() LogStreamOutput {
	return o
}

func (o LogStreamOutput) ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LogStreamOutput{})
}
