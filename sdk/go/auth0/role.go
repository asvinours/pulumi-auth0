// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// With this resource, you can created and manage collections of permissions that can be assigned to users, which are otherwise known as roles. Permissions (scopes) are created on auth0_resource_server, then associated with roles and optionally, users using this resource.
type Role struct {
	pulumi.CustomResourceState

	// String. Description of the role.
	Description pulumi.StringOutput `pulumi:"description"`
	// String. Name for this role.
	Name pulumi.StringOutput `pulumi:"name"`
	// Set(Resource). Configuration settings for permissions (scopes) attached to the role. For details, see Permissions.
	Permissions RolePermissionArrayOutput `pulumi:"permissions"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		args = &RoleArgs{}
	}
	if args.Description == nil {
		args.Description = pulumi.StringPtr("Managed by Pulumi")
	}
	var resource Role
	err := ctx.RegisterResource("auth0:index/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("auth0:index/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// String. Description of the role.
	Description *string `pulumi:"description"`
	// String. Name for this role.
	Name *string `pulumi:"name"`
	// Set(Resource). Configuration settings for permissions (scopes) attached to the role. For details, see Permissions.
	Permissions []RolePermission `pulumi:"permissions"`
}

type RoleState struct {
	// String. Description of the role.
	Description pulumi.StringPtrInput
	// String. Name for this role.
	Name pulumi.StringPtrInput
	// Set(Resource). Configuration settings for permissions (scopes) attached to the role. For details, see Permissions.
	Permissions RolePermissionArrayInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// String. Description of the role.
	Description *string `pulumi:"description"`
	// String. Name for this role.
	Name *string `pulumi:"name"`
	// Set(Resource). Configuration settings for permissions (scopes) attached to the role. For details, see Permissions.
	Permissions []RolePermission `pulumi:"permissions"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// String. Description of the role.
	Description pulumi.StringPtrInput
	// String. Name for this role.
	Name pulumi.StringPtrInput
	// Set(Resource). Configuration settings for permissions (scopes) attached to the role. For details, see Permissions.
	Permissions RolePermissionArrayInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}
