// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.ActionArgs;
import com.pulumi.auth0.Utilities;
import com.pulumi.auth0.inputs.ActionState;
import com.pulumi.auth0.outputs.ActionDependency;
import com.pulumi.auth0.outputs.ActionSecret;
import com.pulumi.auth0.outputs.ActionSupportedTriggers;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Actions are secure, tenant-specific, versioned functions written in Node.js that
 * execute at certain points during the Auth0 runtime. Actions are used to
 * customize and extend Auth0&#39;s capabilities with custom logic.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.auth0.Action;
 * import com.pulumi.auth0.ActionArgs;
 * import com.pulumi.auth0.inputs.ActionDependencyArgs;
 * import com.pulumi.auth0.inputs.ActionSecretArgs;
 * import com.pulumi.auth0.inputs.ActionSupportedTriggersArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myAction = new Action(&#34;myAction&#34;, ActionArgs.builder()        
 *             .code(&#34;&#34;&#34;
 * /**
 *  * Handler that will be called during the execution of a PostLogin flow.
 *  *
 *  * @param {Event} event - Details about the user and the context in which they are logging in.
 *  * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.
 *  *{@literal /}
 *  exports.onExecutePostLogin = async (event, api) =&gt; {
 * 	 console.log(event)
 *  };
 * 
 *             &#34;&#34;&#34;)
 *             .dependencies(            
 *                 ActionDependencyArgs.builder()
 *                     .name(&#34;lodash&#34;)
 *                     .version(&#34;latest&#34;)
 *                     .build(),
 *                 ActionDependencyArgs.builder()
 *                     .name(&#34;request&#34;)
 *                     .version(&#34;latest&#34;)
 *                     .build())
 *             .deploy(true)
 *             .runtime(&#34;node16&#34;)
 *             .secrets(            
 *                 ActionSecretArgs.builder()
 *                     .name(&#34;FOO&#34;)
 *                     .value(&#34;Foo&#34;)
 *                     .build(),
 *                 ActionSecretArgs.builder()
 *                     .name(&#34;BAR&#34;)
 *                     .value(&#34;Bar&#34;)
 *                     .build())
 *             .supportedTriggers(ActionSupportedTriggersArgs.builder()
 *                 .id(&#34;post-login&#34;)
 *                 .version(&#34;v3&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * An action can be imported using the action&#39;s ID, e.g.
 * 
 * ```sh
 *  $ pulumi import auth0:index/action:Action my_action 12f4f21b-017a-319d-92e7-2291c1ca36c4
 * ```
 * 
 *  ~&gt; For security reasons importing `secrets` is not allowed. Therefore, it is advised to import the action without secrets and adding them back after the action has been imported.
 * 
 */
@ResourceType(type="auth0:index/action:Action")
public class Action extends com.pulumi.resources.CustomResource {
    /**
     * The source code of the action.
     * 
     */
    @Export(name="code", type=String.class, parameters={})
    private Output<String> code;

    /**
     * @return The source code of the action.
     * 
     */
    public Output<String> code() {
        return this.code;
    }
    /**
     * List of third party npm modules, and their versions, that this action depends on.
     * 
     */
    @Export(name="dependencies", type=List.class, parameters={ActionDependency.class})
    private Output</* @Nullable */ List<ActionDependency>> dependencies;

    /**
     * @return List of third party npm modules, and their versions, that this action depends on.
     * 
     */
    public Output<Optional<List<ActionDependency>>> dependencies() {
        return Codegen.optional(this.dependencies);
    }
    /**
     * Deploying an action will create a new immutable version of the action.
     * If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the
     * action immediately. Default is `false`.
     * 
     */
    @Export(name="deploy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> deploy;

    /**
     * @return Deploying an action will create a new immutable version of the action.
     * If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the
     * action immediately. Default is `false`.
     * 
     */
    public Output<Optional<Boolean>> deploy() {
        return Codegen.optional(this.deploy);
    }
    /**
     * Secret name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Secret name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Node runtime. For example `node16`, defaults to `node12`.
     * 
     */
    @Export(name="runtime", type=String.class, parameters={})
    private Output<String> runtime;

    /**
     * @return The Node runtime. For example `node16`, defaults to `node12`.
     * 
     */
    public Output<String> runtime() {
        return this.runtime;
    }
    /**
     * List of secrets that are included in an action or a version of an action.
     * 
     */
    @Export(name="secrets", type=List.class, parameters={ActionSecret.class})
    private Output</* @Nullable */ List<ActionSecret>> secrets;

    /**
     * @return List of secrets that are included in an action or a version of an action.
     * 
     */
    public Output<Optional<List<ActionSecret>>> secrets() {
        return Codegen.optional(this.secrets);
    }
    /**
     * List of triggers that this action supports. At this time, an action can only target
     * a single trigger at a time.
     * 
     */
    @Export(name="supportedTriggers", type=ActionSupportedTriggers.class, parameters={})
    private Output<ActionSupportedTriggers> supportedTriggers;

    /**
     * @return List of triggers that this action supports. At this time, an action can only target
     * a single trigger at a time.
     * 
     */
    public Output<ActionSupportedTriggers> supportedTriggers() {
        return this.supportedTriggers;
    }
    /**
     * Version ID of the action. This value is available if `deploy` is set to true.
     * 
     */
    @Export(name="versionId", type=String.class, parameters={})
    private Output<String> versionId;

    /**
     * @return Version ID of the action. This value is available if `deploy` is set to true.
     * 
     */
    public Output<String> versionId() {
        return this.versionId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Action(String name) {
        this(name, ActionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Action(String name, ActionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Action(String name, ActionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/action:Action", name, args == null ? ActionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Action(String name, Output<String> id, @Nullable ActionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/action:Action", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Action get(String name, Output<String> id, @Nullable ActionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Action(name, id, state, options);
    }
}
