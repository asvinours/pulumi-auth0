// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.ConnectionOptionsGatewayAuthenticationArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsIdpInitiatedArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsMfaArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsPasswordComplexityOptionsArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsPasswordDictionaryArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsPasswordHistoryArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsPasswordNoPersonalInfoArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsSigningKeyArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsTotpArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsValidationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionOptionsArgs Empty = new ConnectionOptionsArgs();

    /**
     * ADFS Metadata source.
     * 
     */
    @Import(name="adfsServer")
    private @Nullable Output<String> adfsServer;

    /**
     * @return ADFS Metadata source.
     * 
     */
    public Optional<Output<String>> adfsServer() {
        return Optional.ofNullable(this.adfsServer);
    }

    /**
     * List of allowed audiences.
     * 
     */
    @Import(name="allowedAudiences")
    private @Nullable Output<List<String>> allowedAudiences;

    /**
     * @return List of allowed audiences.
     * 
     */
    public Optional<Output<List<String>>> allowedAudiences() {
        return Optional.ofNullable(this.allowedAudiences);
    }

    @Import(name="apiEnableUsers")
    private @Nullable Output<Boolean> apiEnableUsers;

    public Optional<Output<Boolean>> apiEnableUsers() {
        return Optional.ofNullable(this.apiEnableUsers);
    }

    /**
     * Azure AD app ID.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return Azure AD app ID.
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Map(String). Use this to append or override the link parameters (like `scope`, `redirect_uri`, `protocol`, `response_type`), when you send a link using email.
     * 
     */
    @Import(name="authParams")
    private @Nullable Output<Map<String,String>> authParams;

    /**
     * @return Map(String). Use this to append or override the link parameters (like `scope`, `redirect_uri`, `protocol`, `response_type`), when you send a link using email.
     * 
     */
    public Optional<Output<Map<String,String>>> authParams() {
        return Optional.ofNullable(this.authParams);
    }

    @Import(name="authorizationEndpoint")
    private @Nullable Output<String> authorizationEndpoint;

    public Optional<Output<String>> authorizationEndpoint() {
        return Optional.ofNullable(this.authorizationEndpoint);
    }

    /**
     * Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
     * 
     */
    @Import(name="bruteForceProtection")
    private @Nullable Output<Boolean> bruteForceProtection;

    /**
     * @return Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
     * 
     */
    public Optional<Output<Boolean>> bruteForceProtection() {
        return Optional.ofNullable(this.bruteForceProtection);
    }

    /**
     * OIDC provider client ID.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return OIDC provider client ID.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * OIDC provider client secret.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return OIDC provider client secret.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * String.
     * 
     */
    @Import(name="communityBaseUrl")
    private @Nullable Output<String> communityBaseUrl;

    /**
     * @return String.
     * 
     */
    public Optional<Output<String>> communityBaseUrl() {
        return Optional.ofNullable(this.communityBaseUrl);
    }

    /**
     * A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<Map<String,String>> configuration;

    /**
     * @return A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
     * 
     */
    public Optional<Output<Map<String,String>>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * Custom database action scripts. For more information, read [Custom Database Action Script Templates](https://auth0.com/docs/connections/database/custom-db/templates).
     * 
     */
    @Import(name="customScripts")
    private @Nullable Output<Map<String,String>> customScripts;

    /**
     * @return Custom database action scripts. For more information, read [Custom Database Action Script Templates](https://auth0.com/docs/connections/database/custom-db/templates).
     * 
     */
    public Optional<Output<Map<String,String>>> customScripts() {
        return Optional.ofNullable(this.customScripts);
    }

    /**
     * (Boolean) When enabled additional debugging information will be generated.
     * 
     */
    @Import(name="debug")
    private @Nullable Output<Boolean> debug;

    /**
     * @return (Boolean) When enabled additional debugging information will be generated.
     * 
     */
    public Optional<Output<Boolean>> debug() {
        return Optional.ofNullable(this.debug);
    }

    /**
     * Sign Request Algorithm Digest
     * 
     */
    @Import(name="digestAlgorithm")
    private @Nullable Output<String> digestAlgorithm;

    /**
     * @return Sign Request Algorithm Digest
     * 
     */
    public Optional<Output<String>> digestAlgorithm() {
        return Optional.ofNullable(this.digestAlgorithm);
    }

    @Import(name="disableCache")
    private @Nullable Output<Boolean> disableCache;

    public Optional<Output<Boolean>> disableCache() {
        return Optional.ofNullable(this.disableCache);
    }

    /**
     * (Boolean) Disables or enables user sign out.
     * 
     */
    @Import(name="disableSignOut")
    private @Nullable Output<Boolean> disableSignOut;

    /**
     * @return (Boolean) Disables or enables user sign out.
     * 
     */
    public Optional<Output<Boolean>> disableSignOut() {
        return Optional.ofNullable(this.disableSignOut);
    }

    /**
     * Boolean. Indicates whether or not to allow user sign-ups to your application.
     * 
     */
    @Import(name="disableSignup")
    private @Nullable Output<Boolean> disableSignup;

    /**
     * @return Boolean. Indicates whether or not to allow user sign-ups to your application.
     * 
     */
    public Optional<Output<Boolean>> disableSignup() {
        return Optional.ofNullable(this.disableSignup);
    }

    /**
     * OpenID discovery URL. E.g. `https://auth.example.com/.well-known/openid-configuration`.
     * 
     */
    @Import(name="discoveryUrl")
    private @Nullable Output<String> discoveryUrl;

    /**
     * @return OpenID discovery URL. E.g. `https://auth.example.com/.well-known/openid-configuration`.
     * 
     */
    public Optional<Output<String>> discoveryUrl() {
        return Optional.ofNullable(this.discoveryUrl);
    }

    /**
     * Azure AD domain name.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Azure AD domain name.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
     * 
     */
    @Import(name="domainAliases")
    private @Nullable Output<List<String>> domainAliases;

    /**
     * @return List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
     * 
     */
    public Optional<Output<List<String>>> domainAliases() {
        return Optional.ofNullable(this.domainAliases);
    }

    @Import(name="enabledDatabaseCustomization")
    private @Nullable Output<Boolean> enabledDatabaseCustomization;

    public Optional<Output<Boolean>> enabledDatabaseCustomization() {
        return Optional.ofNullable(this.enabledDatabaseCustomization);
    }

    /**
     * Custom Entity ID for the connection.
     * 
     */
    @Import(name="entityId")
    private @Nullable Output<String> entityId;

    /**
     * @return Custom Entity ID for the connection.
     * 
     */
    public Optional<Output<String>> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    /**
     * SAML Attributes mapping. If you&#39;re configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
     * 
     */
    @Import(name="fieldsMap")
    private @Nullable Output<String> fieldsMap;

    /**
     * @return SAML Attributes mapping. If you&#39;re configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
     * 
     */
    public Optional<Output<String>> fieldsMap() {
        return Optional.ofNullable(this.fieldsMap);
    }

    @Import(name="forwardRequestInfo")
    private @Nullable Output<Boolean> forwardRequestInfo;

    public Optional<Output<Boolean>> forwardRequestInfo() {
        return Optional.ofNullable(this.forwardRequestInfo);
    }

    /**
     * SMS number for the sender. Used when SMS Source is From.
     * 
     */
    @Import(name="from")
    private @Nullable Output<String> from;

    /**
     * @return SMS number for the sender. Used when SMS Source is From.
     * 
     */
    public Optional<Output<String>> from() {
        return Optional.ofNullable(this.from);
    }

    @Import(name="gatewayAuthentication")
    private @Nullable Output<ConnectionOptionsGatewayAuthenticationArgs> gatewayAuthentication;

    public Optional<Output<ConnectionOptionsGatewayAuthenticationArgs>> gatewayAuthentication() {
        return Optional.ofNullable(this.gatewayAuthentication);
    }

    @Import(name="gatewayUrl")
    private @Nullable Output<String> gatewayUrl;

    public Optional<Output<String>> gatewayUrl() {
        return Optional.ofNullable(this.gatewayUrl);
    }

    @Import(name="iconUrl")
    private @Nullable Output<String> iconUrl;

    public Optional<Output<String>> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }

    @Import(name="identityApi")
    private @Nullable Output<String> identityApi;

    public Optional<Output<String>> identityApi() {
        return Optional.ofNullable(this.identityApi);
    }

    /**
     * Configuration Options for IDP Initiated Authentication.  This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`
     * 
     */
    @Import(name="idpInitiated")
    private @Nullable Output<ConnectionOptionsIdpInitiatedArgs> idpInitiated;

    /**
     * @return Configuration Options for IDP Initiated Authentication.  This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`
     * 
     */
    public Optional<Output<ConnectionOptionsIdpInitiatedArgs>> idpInitiated() {
        return Optional.ofNullable(this.idpInitiated);
    }

    /**
     * Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
     * 
     */
    @Import(name="importMode")
    private @Nullable Output<Boolean> importMode;

    /**
     * @return Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
     * 
     */
    public Optional<Output<Boolean>> importMode() {
        return Optional.ofNullable(this.importMode);
    }

    @Import(name="ips")
    private @Nullable Output<List<String>> ips;

    public Optional<Output<List<String>>> ips() {
        return Optional.ofNullable(this.ips);
    }

    /**
     * Issuer URL. E.g. `https://auth.example.com`
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return Issuer URL. E.g. `https://auth.example.com`
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    @Import(name="jwksUri")
    private @Nullable Output<String> jwksUri;

    public Optional<Output<String>> jwksUri() {
        return Optional.ofNullable(this.jwksUri);
    }

    /**
     * Key ID.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return Key ID.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * Maximum number of groups to retrieve.
     * 
     */
    @Import(name="maxGroupsToRetrieve")
    private @Nullable Output<String> maxGroupsToRetrieve;

    /**
     * @return Maximum number of groups to retrieve.
     * 
     */
    public Optional<Output<String>> maxGroupsToRetrieve() {
        return Optional.ofNullable(this.maxGroupsToRetrieve);
    }

    /**
     * SID for Copilot. Used when SMS Source is Copilot.
     * 
     */
    @Import(name="messagingServiceSid")
    private @Nullable Output<String> messagingServiceSid;

    /**
     * @return SID for Copilot. Used when SMS Source is Copilot.
     * 
     */
    public Optional<Output<String>> messagingServiceSid() {
        return Optional.ofNullable(this.messagingServiceSid);
    }

    /**
     * URL of the SAML metadata document.
     * 
     */
    @Import(name="metadataUrl")
    private @Nullable Output<String> metadataUrl;

    /**
     * @return URL of the SAML metadata document.
     * 
     */
    public Optional<Output<String>> metadataUrl() {
        return Optional.ofNullable(this.metadataUrl);
    }

    /**
     * XML content for the SAML metadata document.
     * 
     */
    @Import(name="metadataXml")
    private @Nullable Output<String> metadataXml;

    /**
     * @return XML content for the SAML metadata document.
     * 
     */
    public Optional<Output<String>> metadataXml() {
        return Optional.ofNullable(this.metadataXml);
    }

    /**
     * Configuration settings Options for multifactor authentication. For details, see MFA Options.
     * 
     */
    @Import(name="mfa")
    private @Nullable Output<ConnectionOptionsMfaArgs> mfa;

    /**
     * @return Configuration settings Options for multifactor authentication. For details, see MFA Options.
     * 
     */
    public Optional<Output<ConnectionOptionsMfaArgs>> mfa() {
        return Optional.ofNullable(this.mfa);
    }

    /**
     * Name of the connection.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the connection.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the denylist. See [here](https://auth0.com/docs/security/denylist-user-attributes) for more info.
     * 
     */
    @Import(name="nonPersistentAttrs")
    private @Nullable Output<List<String>> nonPersistentAttrs;

    /**
     * @return If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the denylist. See [here](https://auth0.com/docs/security/denylist-user-attributes) for more info.
     * 
     */
    public Optional<Output<List<String>>> nonPersistentAttrs() {
        return Optional.ofNullable(this.nonPersistentAttrs);
    }

    /**
     * Configuration settings for password complexity. For details, see Password Complexity Options.
     * 
     */
    @Import(name="passwordComplexityOptions")
    private @Nullable Output<ConnectionOptionsPasswordComplexityOptionsArgs> passwordComplexityOptions;

    /**
     * @return Configuration settings for password complexity. For details, see Password Complexity Options.
     * 
     */
    public Optional<Output<ConnectionOptionsPasswordComplexityOptionsArgs>> passwordComplexityOptions() {
        return Optional.ofNullable(this.passwordComplexityOptions);
    }

    /**
     * Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
     * 
     */
    @Import(name="passwordDictionary")
    private @Nullable Output<ConnectionOptionsPasswordDictionaryArgs> passwordDictionary;

    /**
     * @return Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
     * 
     */
    public Optional<Output<ConnectionOptionsPasswordDictionaryArgs>> passwordDictionary() {
        return Optional.ofNullable(this.passwordDictionary);
    }

    /**
     * Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
     * 
     */
    @Import(name="passwordHistories")
    private @Nullable Output<List<ConnectionOptionsPasswordHistoryArgs>> passwordHistories;

    /**
     * @return Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
     * 
     */
    public Optional<Output<List<ConnectionOptionsPasswordHistoryArgs>>> passwordHistories() {
        return Optional.ofNullable(this.passwordHistories);
    }

    /**
     * Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user&#39;s personal data, including user&#39;s name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user&#39;s email, or first part of the user&#39;s email. For details, see Password No Personal Info.
     * 
     */
    @Import(name="passwordNoPersonalInfo")
    private @Nullable Output<ConnectionOptionsPasswordNoPersonalInfoArgs> passwordNoPersonalInfo;

    /**
     * @return Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user&#39;s personal data, including user&#39;s name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user&#39;s email, or first part of the user&#39;s email. For details, see Password No Personal Info.
     * 
     */
    public Optional<Output<ConnectionOptionsPasswordNoPersonalInfoArgs>> passwordNoPersonalInfo() {
        return Optional.ofNullable(this.passwordNoPersonalInfo);
    }

    /**
     * Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
     * 
     */
    @Import(name="passwordPolicy")
    private @Nullable Output<String> passwordPolicy;

    /**
     * @return Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
     * 
     */
    public Optional<Output<String>> passwordPolicy() {
        return Optional.ofNullable(this.passwordPolicy);
    }

    /**
     * (Boolean) Enables proof key for code exchange (PKCE) functionality for OAuth2 connections.
     * 
     */
    @Import(name="pkceEnabled")
    private @Nullable Output<Boolean> pkceEnabled;

    /**
     * @return (Boolean) Enables proof key for code exchange (PKCE) functionality for OAuth2 connections.
     * 
     */
    public Optional<Output<Boolean>> pkceEnabled() {
        return Optional.ofNullable(this.pkceEnabled);
    }

    /**
     * The SAML Response Binding - how the SAML token is received by Auth0 from IdP. Two possible values are `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` (default) and `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST`
     * 
     */
    @Import(name="protocolBinding")
    private @Nullable Output<String> protocolBinding;

    /**
     * @return The SAML Response Binding - how the SAML token is received by Auth0 from IdP. Two possible values are `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` (default) and `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST`
     * 
     */
    public Optional<Output<String>> protocolBinding() {
        return Optional.ofNullable(this.protocolBinding);
    }

    @Import(name="provider")
    private @Nullable Output<String> provider;

    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * Template that formats the SAML request
     * 
     */
    @Import(name="requestTemplate")
    private @Nullable Output<String> requestTemplate;

    /**
     * @return Template that formats the SAML request
     * 
     */
    public Optional<Output<String>> requestTemplate() {
        return Optional.ofNullable(this.requestTemplate);
    }

    /**
     * Indicates whether or not the user is required to provide a username in addition to an email address.
     * 
     */
    @Import(name="requiresUsername")
    private @Nullable Output<Boolean> requiresUsername;

    /**
     * @return Indicates whether or not the user is required to provide a username in addition to an email address.
     * 
     */
    public Optional<Output<Boolean>> requiresUsername() {
        return Optional.ofNullable(this.requiresUsername);
    }

    /**
     * Scopes required by the connection. The value must be a list, for example `[&#34;openid&#34;, &#34;profile&#34;, &#34;email&#34;]`.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Scopes required by the connection. The value must be a list, for example `[&#34;openid&#34;, &#34;profile&#34;, &#34;email&#34;]`.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    @Import(name="scripts")
    private @Nullable Output<Map<String,String>> scripts;

    public Optional<Output<Map<String,String>>> scripts() {
        return Optional.ofNullable(this.scripts);
    }

    /**
     * Determines whether the &#39;name&#39;, &#39;given_name&#39;, &#39;family_name&#39;, &#39;nickname&#39;, and &#39;picture&#39; attributes can be independently updated when using the external IdP. Default is `on_each_login` and can be set to `on_first_login`.
     * 
     */
    @Import(name="setUserRootAttributes")
    private @Nullable Output<String> setUserRootAttributes;

    /**
     * @return Determines whether the &#39;name&#39;, &#39;given_name&#39;, &#39;family_name&#39;, &#39;nickname&#39;, and &#39;picture&#39; attributes can be independently updated when using the external IdP. Default is `on_each_login` and can be set to `on_first_login`.
     * 
     */
    public Optional<Output<String>> setUserRootAttributes() {
        return Optional.ofNullable(this.setUserRootAttributes);
    }

    /**
     * Determines how Auth0 sets the email_verified field in the user profile. Can either be set to `never_set_emails_as_verified` or `always_set_emails_as_verified`.
     * 
     */
    @Import(name="shouldTrustEmailVerifiedConnection")
    private @Nullable Output<String> shouldTrustEmailVerifiedConnection;

    /**
     * @return Determines how Auth0 sets the email_verified field in the user profile. Can either be set to `never_set_emails_as_verified` or `always_set_emails_as_verified`.
     * 
     */
    public Optional<Output<String>> shouldTrustEmailVerifiedConnection() {
        return Optional.ofNullable(this.shouldTrustEmailVerifiedConnection);
    }

    /**
     * SAML single login URL for the connection.
     * 
     */
    @Import(name="signInEndpoint")
    private @Nullable Output<String> signInEndpoint;

    /**
     * @return SAML single login URL for the connection.
     * 
     */
    public Optional<Output<String>> signInEndpoint() {
        return Optional.ofNullable(this.signInEndpoint);
    }

    /**
     * SAML single logout URL for the connection.
     * 
     */
    @Import(name="signOutEndpoint")
    private @Nullable Output<String> signOutEndpoint;

    /**
     * @return SAML single logout URL for the connection.
     * 
     */
    public Optional<Output<String>> signOutEndpoint() {
        return Optional.ofNullable(this.signOutEndpoint);
    }

    /**
     * (Boolean) When enabled, the SAML authentication request will be signed.
     * 
     */
    @Import(name="signSamlRequest")
    private @Nullable Output<Boolean> signSamlRequest;

    /**
     * @return (Boolean) When enabled, the SAML authentication request will be signed.
     * 
     */
    public Optional<Output<Boolean>> signSamlRequest() {
        return Optional.ofNullable(this.signSamlRequest);
    }

    /**
     * Sign Request Algorithm
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return Sign Request Algorithm
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * The X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded
     * 
     */
    @Import(name="signingCert")
    private @Nullable Output<String> signingCert;

    /**
     * @return The X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded
     * 
     */
    public Optional<Output<String>> signingCert() {
        return Optional.ofNullable(this.signingCert);
    }

    /**
     * . The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
     * 
     */
    @Import(name="signingKey")
    private @Nullable Output<ConnectionOptionsSigningKeyArgs> signingKey;

    /**
     * @return . The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
     * 
     */
    public Optional<Output<ConnectionOptionsSigningKeyArgs>> signingKey() {
        return Optional.ofNullable(this.signingKey);
    }

    /**
     * Version 1 is deprecated, use version 2.
     * 
     */
    @Import(name="strategyVersion")
    private @Nullable Output<Integer> strategyVersion;

    /**
     * @return Version 1 is deprecated, use version 2.
     * 
     */
    public Optional<Output<Integer>> strategyVersion() {
        return Optional.ofNullable(this.strategyVersion);
    }

    /**
     * String. Subject line of the email. You can include [common variables](https://auth0.com/docs/email/templates#common-variables).
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return String. Subject line of the email. You can include [common variables](https://auth0.com/docs/email/templates#common-variables).
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * Syntax of the SMS. Options include `markdown` and `liquid`.
     * 
     */
    @Import(name="syntax")
    private @Nullable Output<String> syntax;

    /**
     * @return Syntax of the SMS. Options include `markdown` and `liquid`.
     * 
     */
    public Optional<Output<String>> syntax() {
        return Optional.ofNullable(this.syntax);
    }

    /**
     * Team ID.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return Team ID.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
     * 
     */
    @Import(name="template")
    private @Nullable Output<String> template;

    /**
     * @return Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
     * 
     */
    public Optional<Output<String>> template() {
        return Optional.ofNullable(this.template);
    }

    @Import(name="tenantDomain")
    private @Nullable Output<String> tenantDomain;

    public Optional<Output<String>> tenantDomain() {
        return Optional.ofNullable(this.tenantDomain);
    }

    @Import(name="tokenEndpoint")
    private @Nullable Output<String> tokenEndpoint;

    public Optional<Output<String>> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }

    /**
     * Configuration options for one-time passwords. For details, see TOTP.
     * 
     */
    @Import(name="totp")
    private @Nullable Output<ConnectionOptionsTotpArgs> totp;

    /**
     * @return Configuration options for one-time passwords. For details, see TOTP.
     * 
     */
    public Optional<Output<ConnectionOptionsTotpArgs>> totp() {
        return Optional.ofNullable(this.totp);
    }

    /**
     * SID for your Twilio account.
     * 
     */
    @Import(name="twilioSid")
    private @Nullable Output<String> twilioSid;

    /**
     * @return SID for your Twilio account.
     * 
     */
    public Optional<Output<String>> twilioSid() {
        return Optional.ofNullable(this.twilioSid);
    }

    /**
     * AuthToken for your Twilio account.
     * 
     */
    @Import(name="twilioToken")
    private @Nullable Output<String> twilioToken;

    /**
     * @return AuthToken for your Twilio account.
     * 
     */
    public Optional<Output<String>> twilioToken() {
        return Optional.ofNullable(this.twilioToken);
    }

    /**
     * Value can be `back_channel` or `front_channel`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Value can be `back_channel` or `front_channel`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * String (JSON Encoded). You can pass provider-specific parameters to an Identity Provider during authentication. The values can either be static per connection or dynamic per user.
     * 
     */
    @Import(name="upstreamParams")
    private @Nullable Output<String> upstreamParams;

    /**
     * @return String (JSON Encoded). You can pass provider-specific parameters to an Identity Provider during authentication. The values can either be static per connection or dynamic per user.
     * 
     */
    public Optional<Output<String>> upstreamParams() {
        return Optional.ofNullable(this.upstreamParams);
    }

    @Import(name="useCertAuth")
    private @Nullable Output<Boolean> useCertAuth;

    public Optional<Output<Boolean>> useCertAuth() {
        return Optional.ofNullable(this.useCertAuth);
    }

    @Import(name="useKerberos")
    private @Nullable Output<Boolean> useKerberos;

    public Optional<Output<Boolean>> useKerberos() {
        return Optional.ofNullable(this.useKerberos);
    }

    @Import(name="useWsfed")
    private @Nullable Output<Boolean> useWsfed;

    public Optional<Output<Boolean>> useWsfed() {
        return Optional.ofNullable(this.useWsfed);
    }

    /**
     * Attribute in the SAML token that will be mapped to the user_id property in Auth0.
     * 
     */
    @Import(name="userIdAttribute")
    private @Nullable Output<String> userIdAttribute;

    /**
     * @return Attribute in the SAML token that will be mapped to the user_id property in Auth0.
     * 
     */
    public Optional<Output<String>> userIdAttribute() {
        return Optional.ofNullable(this.userIdAttribute);
    }

    @Import(name="userinfoEndpoint")
    private @Nullable Output<String> userinfoEndpoint;

    public Optional<Output<String>> userinfoEndpoint() {
        return Optional.ofNullable(this.userinfoEndpoint);
    }

    /**
     * Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
     * 
     */
    @Import(name="validation")
    private @Nullable Output<ConnectionOptionsValidationArgs> validation;

    /**
     * @return Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
     * 
     */
    public Optional<Output<ConnectionOptionsValidationArgs>> validation() {
        return Optional.ofNullable(this.validation);
    }

    /**
     * Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you&#39;re using this for a multi-tenant application in Azure AD.
     * 
     */
    @Import(name="waadCommonEndpoint")
    private @Nullable Output<Boolean> waadCommonEndpoint;

    /**
     * @return Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you&#39;re using this for a multi-tenant application in Azure AD.
     * 
     */
    public Optional<Output<Boolean>> waadCommonEndpoint() {
        return Optional.ofNullable(this.waadCommonEndpoint);
    }

    @Import(name="waadProtocol")
    private @Nullable Output<String> waadProtocol;

    public Optional<Output<String>> waadProtocol() {
        return Optional.ofNullable(this.waadProtocol);
    }

    private ConnectionOptionsArgs() {}

    private ConnectionOptionsArgs(ConnectionOptionsArgs $) {
        this.adfsServer = $.adfsServer;
        this.allowedAudiences = $.allowedAudiences;
        this.apiEnableUsers = $.apiEnableUsers;
        this.appId = $.appId;
        this.authParams = $.authParams;
        this.authorizationEndpoint = $.authorizationEndpoint;
        this.bruteForceProtection = $.bruteForceProtection;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.communityBaseUrl = $.communityBaseUrl;
        this.configuration = $.configuration;
        this.customScripts = $.customScripts;
        this.debug = $.debug;
        this.digestAlgorithm = $.digestAlgorithm;
        this.disableCache = $.disableCache;
        this.disableSignOut = $.disableSignOut;
        this.disableSignup = $.disableSignup;
        this.discoveryUrl = $.discoveryUrl;
        this.domain = $.domain;
        this.domainAliases = $.domainAliases;
        this.enabledDatabaseCustomization = $.enabledDatabaseCustomization;
        this.entityId = $.entityId;
        this.fieldsMap = $.fieldsMap;
        this.forwardRequestInfo = $.forwardRequestInfo;
        this.from = $.from;
        this.gatewayAuthentication = $.gatewayAuthentication;
        this.gatewayUrl = $.gatewayUrl;
        this.iconUrl = $.iconUrl;
        this.identityApi = $.identityApi;
        this.idpInitiated = $.idpInitiated;
        this.importMode = $.importMode;
        this.ips = $.ips;
        this.issuer = $.issuer;
        this.jwksUri = $.jwksUri;
        this.keyId = $.keyId;
        this.maxGroupsToRetrieve = $.maxGroupsToRetrieve;
        this.messagingServiceSid = $.messagingServiceSid;
        this.metadataUrl = $.metadataUrl;
        this.metadataXml = $.metadataXml;
        this.mfa = $.mfa;
        this.name = $.name;
        this.nonPersistentAttrs = $.nonPersistentAttrs;
        this.passwordComplexityOptions = $.passwordComplexityOptions;
        this.passwordDictionary = $.passwordDictionary;
        this.passwordHistories = $.passwordHistories;
        this.passwordNoPersonalInfo = $.passwordNoPersonalInfo;
        this.passwordPolicy = $.passwordPolicy;
        this.pkceEnabled = $.pkceEnabled;
        this.protocolBinding = $.protocolBinding;
        this.provider = $.provider;
        this.requestTemplate = $.requestTemplate;
        this.requiresUsername = $.requiresUsername;
        this.scopes = $.scopes;
        this.scripts = $.scripts;
        this.setUserRootAttributes = $.setUserRootAttributes;
        this.shouldTrustEmailVerifiedConnection = $.shouldTrustEmailVerifiedConnection;
        this.signInEndpoint = $.signInEndpoint;
        this.signOutEndpoint = $.signOutEndpoint;
        this.signSamlRequest = $.signSamlRequest;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.signingCert = $.signingCert;
        this.signingKey = $.signingKey;
        this.strategyVersion = $.strategyVersion;
        this.subject = $.subject;
        this.syntax = $.syntax;
        this.teamId = $.teamId;
        this.template = $.template;
        this.tenantDomain = $.tenantDomain;
        this.tokenEndpoint = $.tokenEndpoint;
        this.totp = $.totp;
        this.twilioSid = $.twilioSid;
        this.twilioToken = $.twilioToken;
        this.type = $.type;
        this.upstreamParams = $.upstreamParams;
        this.useCertAuth = $.useCertAuth;
        this.useKerberos = $.useKerberos;
        this.useWsfed = $.useWsfed;
        this.userIdAttribute = $.userIdAttribute;
        this.userinfoEndpoint = $.userinfoEndpoint;
        this.validation = $.validation;
        this.waadCommonEndpoint = $.waadCommonEndpoint;
        this.waadProtocol = $.waadProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionOptionsArgs $;

        public Builder() {
            $ = new ConnectionOptionsArgs();
        }

        public Builder(ConnectionOptionsArgs defaults) {
            $ = new ConnectionOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adfsServer ADFS Metadata source.
         * 
         * @return builder
         * 
         */
        public Builder adfsServer(@Nullable Output<String> adfsServer) {
            $.adfsServer = adfsServer;
            return this;
        }

        /**
         * @param adfsServer ADFS Metadata source.
         * 
         * @return builder
         * 
         */
        public Builder adfsServer(String adfsServer) {
            return adfsServer(Output.of(adfsServer));
        }

        /**
         * @param allowedAudiences List of allowed audiences.
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(@Nullable Output<List<String>> allowedAudiences) {
            $.allowedAudiences = allowedAudiences;
            return this;
        }

        /**
         * @param allowedAudiences List of allowed audiences.
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(List<String> allowedAudiences) {
            return allowedAudiences(Output.of(allowedAudiences));
        }

        /**
         * @param allowedAudiences List of allowed audiences.
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(String... allowedAudiences) {
            return allowedAudiences(List.of(allowedAudiences));
        }

        public Builder apiEnableUsers(@Nullable Output<Boolean> apiEnableUsers) {
            $.apiEnableUsers = apiEnableUsers;
            return this;
        }

        public Builder apiEnableUsers(Boolean apiEnableUsers) {
            return apiEnableUsers(Output.of(apiEnableUsers));
        }

        /**
         * @param appId Azure AD app ID.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId Azure AD app ID.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param authParams Map(String). Use this to append or override the link parameters (like `scope`, `redirect_uri`, `protocol`, `response_type`), when you send a link using email.
         * 
         * @return builder
         * 
         */
        public Builder authParams(@Nullable Output<Map<String,String>> authParams) {
            $.authParams = authParams;
            return this;
        }

        /**
         * @param authParams Map(String). Use this to append or override the link parameters (like `scope`, `redirect_uri`, `protocol`, `response_type`), when you send a link using email.
         * 
         * @return builder
         * 
         */
        public Builder authParams(Map<String,String> authParams) {
            return authParams(Output.of(authParams));
        }

        public Builder authorizationEndpoint(@Nullable Output<String> authorizationEndpoint) {
            $.authorizationEndpoint = authorizationEndpoint;
            return this;
        }

        public Builder authorizationEndpoint(String authorizationEndpoint) {
            return authorizationEndpoint(Output.of(authorizationEndpoint));
        }

        /**
         * @param bruteForceProtection Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
         * 
         * @return builder
         * 
         */
        public Builder bruteForceProtection(@Nullable Output<Boolean> bruteForceProtection) {
            $.bruteForceProtection = bruteForceProtection;
            return this;
        }

        /**
         * @param bruteForceProtection Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
         * 
         * @return builder
         * 
         */
        public Builder bruteForceProtection(Boolean bruteForceProtection) {
            return bruteForceProtection(Output.of(bruteForceProtection));
        }

        /**
         * @param clientId OIDC provider client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId OIDC provider client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret OIDC provider client secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret OIDC provider client secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param communityBaseUrl String.
         * 
         * @return builder
         * 
         */
        public Builder communityBaseUrl(@Nullable Output<String> communityBaseUrl) {
            $.communityBaseUrl = communityBaseUrl;
            return this;
        }

        /**
         * @param communityBaseUrl String.
         * 
         * @return builder
         * 
         */
        public Builder communityBaseUrl(String communityBaseUrl) {
            return communityBaseUrl(Output.of(communityBaseUrl));
        }

        /**
         * @param configuration A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<Map<String,String>> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
         * 
         * @return builder
         * 
         */
        public Builder configuration(Map<String,String> configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param customScripts Custom database action scripts. For more information, read [Custom Database Action Script Templates](https://auth0.com/docs/connections/database/custom-db/templates).
         * 
         * @return builder
         * 
         */
        public Builder customScripts(@Nullable Output<Map<String,String>> customScripts) {
            $.customScripts = customScripts;
            return this;
        }

        /**
         * @param customScripts Custom database action scripts. For more information, read [Custom Database Action Script Templates](https://auth0.com/docs/connections/database/custom-db/templates).
         * 
         * @return builder
         * 
         */
        public Builder customScripts(Map<String,String> customScripts) {
            return customScripts(Output.of(customScripts));
        }

        /**
         * @param debug (Boolean) When enabled additional debugging information will be generated.
         * 
         * @return builder
         * 
         */
        public Builder debug(@Nullable Output<Boolean> debug) {
            $.debug = debug;
            return this;
        }

        /**
         * @param debug (Boolean) When enabled additional debugging information will be generated.
         * 
         * @return builder
         * 
         */
        public Builder debug(Boolean debug) {
            return debug(Output.of(debug));
        }

        /**
         * @param digestAlgorithm Sign Request Algorithm Digest
         * 
         * @return builder
         * 
         */
        public Builder digestAlgorithm(@Nullable Output<String> digestAlgorithm) {
            $.digestAlgorithm = digestAlgorithm;
            return this;
        }

        /**
         * @param digestAlgorithm Sign Request Algorithm Digest
         * 
         * @return builder
         * 
         */
        public Builder digestAlgorithm(String digestAlgorithm) {
            return digestAlgorithm(Output.of(digestAlgorithm));
        }

        public Builder disableCache(@Nullable Output<Boolean> disableCache) {
            $.disableCache = disableCache;
            return this;
        }

        public Builder disableCache(Boolean disableCache) {
            return disableCache(Output.of(disableCache));
        }

        /**
         * @param disableSignOut (Boolean) Disables or enables user sign out.
         * 
         * @return builder
         * 
         */
        public Builder disableSignOut(@Nullable Output<Boolean> disableSignOut) {
            $.disableSignOut = disableSignOut;
            return this;
        }

        /**
         * @param disableSignOut (Boolean) Disables or enables user sign out.
         * 
         * @return builder
         * 
         */
        public Builder disableSignOut(Boolean disableSignOut) {
            return disableSignOut(Output.of(disableSignOut));
        }

        /**
         * @param disableSignup Boolean. Indicates whether or not to allow user sign-ups to your application.
         * 
         * @return builder
         * 
         */
        public Builder disableSignup(@Nullable Output<Boolean> disableSignup) {
            $.disableSignup = disableSignup;
            return this;
        }

        /**
         * @param disableSignup Boolean. Indicates whether or not to allow user sign-ups to your application.
         * 
         * @return builder
         * 
         */
        public Builder disableSignup(Boolean disableSignup) {
            return disableSignup(Output.of(disableSignup));
        }

        /**
         * @param discoveryUrl OpenID discovery URL. E.g. `https://auth.example.com/.well-known/openid-configuration`.
         * 
         * @return builder
         * 
         */
        public Builder discoveryUrl(@Nullable Output<String> discoveryUrl) {
            $.discoveryUrl = discoveryUrl;
            return this;
        }

        /**
         * @param discoveryUrl OpenID discovery URL. E.g. `https://auth.example.com/.well-known/openid-configuration`.
         * 
         * @return builder
         * 
         */
        public Builder discoveryUrl(String discoveryUrl) {
            return discoveryUrl(Output.of(discoveryUrl));
        }

        /**
         * @param domain Azure AD domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Azure AD domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param domainAliases List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
         * 
         * @return builder
         * 
         */
        public Builder domainAliases(@Nullable Output<List<String>> domainAliases) {
            $.domainAliases = domainAliases;
            return this;
        }

        /**
         * @param domainAliases List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
         * 
         * @return builder
         * 
         */
        public Builder domainAliases(List<String> domainAliases) {
            return domainAliases(Output.of(domainAliases));
        }

        /**
         * @param domainAliases List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
         * 
         * @return builder
         * 
         */
        public Builder domainAliases(String... domainAliases) {
            return domainAliases(List.of(domainAliases));
        }

        public Builder enabledDatabaseCustomization(@Nullable Output<Boolean> enabledDatabaseCustomization) {
            $.enabledDatabaseCustomization = enabledDatabaseCustomization;
            return this;
        }

        public Builder enabledDatabaseCustomization(Boolean enabledDatabaseCustomization) {
            return enabledDatabaseCustomization(Output.of(enabledDatabaseCustomization));
        }

        /**
         * @param entityId Custom Entity ID for the connection.
         * 
         * @return builder
         * 
         */
        public Builder entityId(@Nullable Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param entityId Custom Entity ID for the connection.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        /**
         * @param fieldsMap SAML Attributes mapping. If you&#39;re configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
         * 
         * @return builder
         * 
         */
        public Builder fieldsMap(@Nullable Output<String> fieldsMap) {
            $.fieldsMap = fieldsMap;
            return this;
        }

        /**
         * @param fieldsMap SAML Attributes mapping. If you&#39;re configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
         * 
         * @return builder
         * 
         */
        public Builder fieldsMap(String fieldsMap) {
            return fieldsMap(Output.of(fieldsMap));
        }

        public Builder forwardRequestInfo(@Nullable Output<Boolean> forwardRequestInfo) {
            $.forwardRequestInfo = forwardRequestInfo;
            return this;
        }

        public Builder forwardRequestInfo(Boolean forwardRequestInfo) {
            return forwardRequestInfo(Output.of(forwardRequestInfo));
        }

        /**
         * @param from SMS number for the sender. Used when SMS Source is From.
         * 
         * @return builder
         * 
         */
        public Builder from(@Nullable Output<String> from) {
            $.from = from;
            return this;
        }

        /**
         * @param from SMS number for the sender. Used when SMS Source is From.
         * 
         * @return builder
         * 
         */
        public Builder from(String from) {
            return from(Output.of(from));
        }

        public Builder gatewayAuthentication(@Nullable Output<ConnectionOptionsGatewayAuthenticationArgs> gatewayAuthentication) {
            $.gatewayAuthentication = gatewayAuthentication;
            return this;
        }

        public Builder gatewayAuthentication(ConnectionOptionsGatewayAuthenticationArgs gatewayAuthentication) {
            return gatewayAuthentication(Output.of(gatewayAuthentication));
        }

        public Builder gatewayUrl(@Nullable Output<String> gatewayUrl) {
            $.gatewayUrl = gatewayUrl;
            return this;
        }

        public Builder gatewayUrl(String gatewayUrl) {
            return gatewayUrl(Output.of(gatewayUrl));
        }

        public Builder iconUrl(@Nullable Output<String> iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        public Builder iconUrl(String iconUrl) {
            return iconUrl(Output.of(iconUrl));
        }

        public Builder identityApi(@Nullable Output<String> identityApi) {
            $.identityApi = identityApi;
            return this;
        }

        public Builder identityApi(String identityApi) {
            return identityApi(Output.of(identityApi));
        }

        /**
         * @param idpInitiated Configuration Options for IDP Initiated Authentication.  This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`
         * 
         * @return builder
         * 
         */
        public Builder idpInitiated(@Nullable Output<ConnectionOptionsIdpInitiatedArgs> idpInitiated) {
            $.idpInitiated = idpInitiated;
            return this;
        }

        /**
         * @param idpInitiated Configuration Options for IDP Initiated Authentication.  This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`
         * 
         * @return builder
         * 
         */
        public Builder idpInitiated(ConnectionOptionsIdpInitiatedArgs idpInitiated) {
            return idpInitiated(Output.of(idpInitiated));
        }

        /**
         * @param importMode Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
         * 
         * @return builder
         * 
         */
        public Builder importMode(@Nullable Output<Boolean> importMode) {
            $.importMode = importMode;
            return this;
        }

        /**
         * @param importMode Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
         * 
         * @return builder
         * 
         */
        public Builder importMode(Boolean importMode) {
            return importMode(Output.of(importMode));
        }

        public Builder ips(@Nullable Output<List<String>> ips) {
            $.ips = ips;
            return this;
        }

        public Builder ips(List<String> ips) {
            return ips(Output.of(ips));
        }

        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param issuer Issuer URL. E.g. `https://auth.example.com`
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer Issuer URL. E.g. `https://auth.example.com`
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        public Builder jwksUri(@Nullable Output<String> jwksUri) {
            $.jwksUri = jwksUri;
            return this;
        }

        public Builder jwksUri(String jwksUri) {
            return jwksUri(Output.of(jwksUri));
        }

        /**
         * @param keyId Key ID.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId Key ID.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param maxGroupsToRetrieve Maximum number of groups to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder maxGroupsToRetrieve(@Nullable Output<String> maxGroupsToRetrieve) {
            $.maxGroupsToRetrieve = maxGroupsToRetrieve;
            return this;
        }

        /**
         * @param maxGroupsToRetrieve Maximum number of groups to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder maxGroupsToRetrieve(String maxGroupsToRetrieve) {
            return maxGroupsToRetrieve(Output.of(maxGroupsToRetrieve));
        }

        /**
         * @param messagingServiceSid SID for Copilot. Used when SMS Source is Copilot.
         * 
         * @return builder
         * 
         */
        public Builder messagingServiceSid(@Nullable Output<String> messagingServiceSid) {
            $.messagingServiceSid = messagingServiceSid;
            return this;
        }

        /**
         * @param messagingServiceSid SID for Copilot. Used when SMS Source is Copilot.
         * 
         * @return builder
         * 
         */
        public Builder messagingServiceSid(String messagingServiceSid) {
            return messagingServiceSid(Output.of(messagingServiceSid));
        }

        /**
         * @param metadataUrl URL of the SAML metadata document.
         * 
         * @return builder
         * 
         */
        public Builder metadataUrl(@Nullable Output<String> metadataUrl) {
            $.metadataUrl = metadataUrl;
            return this;
        }

        /**
         * @param metadataUrl URL of the SAML metadata document.
         * 
         * @return builder
         * 
         */
        public Builder metadataUrl(String metadataUrl) {
            return metadataUrl(Output.of(metadataUrl));
        }

        /**
         * @param metadataXml XML content for the SAML metadata document.
         * 
         * @return builder
         * 
         */
        public Builder metadataXml(@Nullable Output<String> metadataXml) {
            $.metadataXml = metadataXml;
            return this;
        }

        /**
         * @param metadataXml XML content for the SAML metadata document.
         * 
         * @return builder
         * 
         */
        public Builder metadataXml(String metadataXml) {
            return metadataXml(Output.of(metadataXml));
        }

        /**
         * @param mfa Configuration settings Options for multifactor authentication. For details, see MFA Options.
         * 
         * @return builder
         * 
         */
        public Builder mfa(@Nullable Output<ConnectionOptionsMfaArgs> mfa) {
            $.mfa = mfa;
            return this;
        }

        /**
         * @param mfa Configuration settings Options for multifactor authentication. For details, see MFA Options.
         * 
         * @return builder
         * 
         */
        public Builder mfa(ConnectionOptionsMfaArgs mfa) {
            return mfa(Output.of(mfa));
        }

        /**
         * @param name Name of the connection.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the connection.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nonPersistentAttrs If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the denylist. See [here](https://auth0.com/docs/security/denylist-user-attributes) for more info.
         * 
         * @return builder
         * 
         */
        public Builder nonPersistentAttrs(@Nullable Output<List<String>> nonPersistentAttrs) {
            $.nonPersistentAttrs = nonPersistentAttrs;
            return this;
        }

        /**
         * @param nonPersistentAttrs If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the denylist. See [here](https://auth0.com/docs/security/denylist-user-attributes) for more info.
         * 
         * @return builder
         * 
         */
        public Builder nonPersistentAttrs(List<String> nonPersistentAttrs) {
            return nonPersistentAttrs(Output.of(nonPersistentAttrs));
        }

        /**
         * @param nonPersistentAttrs If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the denylist. See [here](https://auth0.com/docs/security/denylist-user-attributes) for more info.
         * 
         * @return builder
         * 
         */
        public Builder nonPersistentAttrs(String... nonPersistentAttrs) {
            return nonPersistentAttrs(List.of(nonPersistentAttrs));
        }

        /**
         * @param passwordComplexityOptions Configuration settings for password complexity. For details, see Password Complexity Options.
         * 
         * @return builder
         * 
         */
        public Builder passwordComplexityOptions(@Nullable Output<ConnectionOptionsPasswordComplexityOptionsArgs> passwordComplexityOptions) {
            $.passwordComplexityOptions = passwordComplexityOptions;
            return this;
        }

        /**
         * @param passwordComplexityOptions Configuration settings for password complexity. For details, see Password Complexity Options.
         * 
         * @return builder
         * 
         */
        public Builder passwordComplexityOptions(ConnectionOptionsPasswordComplexityOptionsArgs passwordComplexityOptions) {
            return passwordComplexityOptions(Output.of(passwordComplexityOptions));
        }

        /**
         * @param passwordDictionary Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
         * 
         * @return builder
         * 
         */
        public Builder passwordDictionary(@Nullable Output<ConnectionOptionsPasswordDictionaryArgs> passwordDictionary) {
            $.passwordDictionary = passwordDictionary;
            return this;
        }

        /**
         * @param passwordDictionary Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
         * 
         * @return builder
         * 
         */
        public Builder passwordDictionary(ConnectionOptionsPasswordDictionaryArgs passwordDictionary) {
            return passwordDictionary(Output.of(passwordDictionary));
        }

        /**
         * @param passwordHistories Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
         * 
         * @return builder
         * 
         */
        public Builder passwordHistories(@Nullable Output<List<ConnectionOptionsPasswordHistoryArgs>> passwordHistories) {
            $.passwordHistories = passwordHistories;
            return this;
        }

        /**
         * @param passwordHistories Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
         * 
         * @return builder
         * 
         */
        public Builder passwordHistories(List<ConnectionOptionsPasswordHistoryArgs> passwordHistories) {
            return passwordHistories(Output.of(passwordHistories));
        }

        /**
         * @param passwordHistories Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
         * 
         * @return builder
         * 
         */
        public Builder passwordHistories(ConnectionOptionsPasswordHistoryArgs... passwordHistories) {
            return passwordHistories(List.of(passwordHistories));
        }

        /**
         * @param passwordNoPersonalInfo Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user&#39;s personal data, including user&#39;s name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user&#39;s email, or first part of the user&#39;s email. For details, see Password No Personal Info.
         * 
         * @return builder
         * 
         */
        public Builder passwordNoPersonalInfo(@Nullable Output<ConnectionOptionsPasswordNoPersonalInfoArgs> passwordNoPersonalInfo) {
            $.passwordNoPersonalInfo = passwordNoPersonalInfo;
            return this;
        }

        /**
         * @param passwordNoPersonalInfo Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user&#39;s personal data, including user&#39;s name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user&#39;s email, or first part of the user&#39;s email. For details, see Password No Personal Info.
         * 
         * @return builder
         * 
         */
        public Builder passwordNoPersonalInfo(ConnectionOptionsPasswordNoPersonalInfoArgs passwordNoPersonalInfo) {
            return passwordNoPersonalInfo(Output.of(passwordNoPersonalInfo));
        }

        /**
         * @param passwordPolicy Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(@Nullable Output<String> passwordPolicy) {
            $.passwordPolicy = passwordPolicy;
            return this;
        }

        /**
         * @param passwordPolicy Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(String passwordPolicy) {
            return passwordPolicy(Output.of(passwordPolicy));
        }

        /**
         * @param pkceEnabled (Boolean) Enables proof key for code exchange (PKCE) functionality for OAuth2 connections.
         * 
         * @return builder
         * 
         */
        public Builder pkceEnabled(@Nullable Output<Boolean> pkceEnabled) {
            $.pkceEnabled = pkceEnabled;
            return this;
        }

        /**
         * @param pkceEnabled (Boolean) Enables proof key for code exchange (PKCE) functionality for OAuth2 connections.
         * 
         * @return builder
         * 
         */
        public Builder pkceEnabled(Boolean pkceEnabled) {
            return pkceEnabled(Output.of(pkceEnabled));
        }

        /**
         * @param protocolBinding The SAML Response Binding - how the SAML token is received by Auth0 from IdP. Two possible values are `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` (default) and `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST`
         * 
         * @return builder
         * 
         */
        public Builder protocolBinding(@Nullable Output<String> protocolBinding) {
            $.protocolBinding = protocolBinding;
            return this;
        }

        /**
         * @param protocolBinding The SAML Response Binding - how the SAML token is received by Auth0 from IdP. Two possible values are `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` (default) and `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST`
         * 
         * @return builder
         * 
         */
        public Builder protocolBinding(String protocolBinding) {
            return protocolBinding(Output.of(protocolBinding));
        }

        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param requestTemplate Template that formats the SAML request
         * 
         * @return builder
         * 
         */
        public Builder requestTemplate(@Nullable Output<String> requestTemplate) {
            $.requestTemplate = requestTemplate;
            return this;
        }

        /**
         * @param requestTemplate Template that formats the SAML request
         * 
         * @return builder
         * 
         */
        public Builder requestTemplate(String requestTemplate) {
            return requestTemplate(Output.of(requestTemplate));
        }

        /**
         * @param requiresUsername Indicates whether or not the user is required to provide a username in addition to an email address.
         * 
         * @return builder
         * 
         */
        public Builder requiresUsername(@Nullable Output<Boolean> requiresUsername) {
            $.requiresUsername = requiresUsername;
            return this;
        }

        /**
         * @param requiresUsername Indicates whether or not the user is required to provide a username in addition to an email address.
         * 
         * @return builder
         * 
         */
        public Builder requiresUsername(Boolean requiresUsername) {
            return requiresUsername(Output.of(requiresUsername));
        }

        /**
         * @param scopes Scopes required by the connection. The value must be a list, for example `[&#34;openid&#34;, &#34;profile&#34;, &#34;email&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Scopes required by the connection. The value must be a list, for example `[&#34;openid&#34;, &#34;profile&#34;, &#34;email&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Scopes required by the connection. The value must be a list, for example `[&#34;openid&#34;, &#34;profile&#34;, &#34;email&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public Builder scripts(@Nullable Output<Map<String,String>> scripts) {
            $.scripts = scripts;
            return this;
        }

        public Builder scripts(Map<String,String> scripts) {
            return scripts(Output.of(scripts));
        }

        /**
         * @param setUserRootAttributes Determines whether the &#39;name&#39;, &#39;given_name&#39;, &#39;family_name&#39;, &#39;nickname&#39;, and &#39;picture&#39; attributes can be independently updated when using the external IdP. Default is `on_each_login` and can be set to `on_first_login`.
         * 
         * @return builder
         * 
         */
        public Builder setUserRootAttributes(@Nullable Output<String> setUserRootAttributes) {
            $.setUserRootAttributes = setUserRootAttributes;
            return this;
        }

        /**
         * @param setUserRootAttributes Determines whether the &#39;name&#39;, &#39;given_name&#39;, &#39;family_name&#39;, &#39;nickname&#39;, and &#39;picture&#39; attributes can be independently updated when using the external IdP. Default is `on_each_login` and can be set to `on_first_login`.
         * 
         * @return builder
         * 
         */
        public Builder setUserRootAttributes(String setUserRootAttributes) {
            return setUserRootAttributes(Output.of(setUserRootAttributes));
        }

        /**
         * @param shouldTrustEmailVerifiedConnection Determines how Auth0 sets the email_verified field in the user profile. Can either be set to `never_set_emails_as_verified` or `always_set_emails_as_verified`.
         * 
         * @return builder
         * 
         */
        public Builder shouldTrustEmailVerifiedConnection(@Nullable Output<String> shouldTrustEmailVerifiedConnection) {
            $.shouldTrustEmailVerifiedConnection = shouldTrustEmailVerifiedConnection;
            return this;
        }

        /**
         * @param shouldTrustEmailVerifiedConnection Determines how Auth0 sets the email_verified field in the user profile. Can either be set to `never_set_emails_as_verified` or `always_set_emails_as_verified`.
         * 
         * @return builder
         * 
         */
        public Builder shouldTrustEmailVerifiedConnection(String shouldTrustEmailVerifiedConnection) {
            return shouldTrustEmailVerifiedConnection(Output.of(shouldTrustEmailVerifiedConnection));
        }

        /**
         * @param signInEndpoint SAML single login URL for the connection.
         * 
         * @return builder
         * 
         */
        public Builder signInEndpoint(@Nullable Output<String> signInEndpoint) {
            $.signInEndpoint = signInEndpoint;
            return this;
        }

        /**
         * @param signInEndpoint SAML single login URL for the connection.
         * 
         * @return builder
         * 
         */
        public Builder signInEndpoint(String signInEndpoint) {
            return signInEndpoint(Output.of(signInEndpoint));
        }

        /**
         * @param signOutEndpoint SAML single logout URL for the connection.
         * 
         * @return builder
         * 
         */
        public Builder signOutEndpoint(@Nullable Output<String> signOutEndpoint) {
            $.signOutEndpoint = signOutEndpoint;
            return this;
        }

        /**
         * @param signOutEndpoint SAML single logout URL for the connection.
         * 
         * @return builder
         * 
         */
        public Builder signOutEndpoint(String signOutEndpoint) {
            return signOutEndpoint(Output.of(signOutEndpoint));
        }

        /**
         * @param signSamlRequest (Boolean) When enabled, the SAML authentication request will be signed.
         * 
         * @return builder
         * 
         */
        public Builder signSamlRequest(@Nullable Output<Boolean> signSamlRequest) {
            $.signSamlRequest = signSamlRequest;
            return this;
        }

        /**
         * @param signSamlRequest (Boolean) When enabled, the SAML authentication request will be signed.
         * 
         * @return builder
         * 
         */
        public Builder signSamlRequest(Boolean signSamlRequest) {
            return signSamlRequest(Output.of(signSamlRequest));
        }

        /**
         * @param signatureAlgorithm Sign Request Algorithm
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm Sign Request Algorithm
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param signingCert The X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded
         * 
         * @return builder
         * 
         */
        public Builder signingCert(@Nullable Output<String> signingCert) {
            $.signingCert = signingCert;
            return this;
        }

        /**
         * @param signingCert The X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded
         * 
         * @return builder
         * 
         */
        public Builder signingCert(String signingCert) {
            return signingCert(Output.of(signingCert));
        }

        /**
         * @param signingKey . The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
         * 
         * @return builder
         * 
         */
        public Builder signingKey(@Nullable Output<ConnectionOptionsSigningKeyArgs> signingKey) {
            $.signingKey = signingKey;
            return this;
        }

        /**
         * @param signingKey . The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
         * 
         * @return builder
         * 
         */
        public Builder signingKey(ConnectionOptionsSigningKeyArgs signingKey) {
            return signingKey(Output.of(signingKey));
        }

        /**
         * @param strategyVersion Version 1 is deprecated, use version 2.
         * 
         * @return builder
         * 
         */
        public Builder strategyVersion(@Nullable Output<Integer> strategyVersion) {
            $.strategyVersion = strategyVersion;
            return this;
        }

        /**
         * @param strategyVersion Version 1 is deprecated, use version 2.
         * 
         * @return builder
         * 
         */
        public Builder strategyVersion(Integer strategyVersion) {
            return strategyVersion(Output.of(strategyVersion));
        }

        /**
         * @param subject String. Subject line of the email. You can include [common variables](https://auth0.com/docs/email/templates#common-variables).
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject String. Subject line of the email. You can include [common variables](https://auth0.com/docs/email/templates#common-variables).
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param syntax Syntax of the SMS. Options include `markdown` and `liquid`.
         * 
         * @return builder
         * 
         */
        public Builder syntax(@Nullable Output<String> syntax) {
            $.syntax = syntax;
            return this;
        }

        /**
         * @param syntax Syntax of the SMS. Options include `markdown` and `liquid`.
         * 
         * @return builder
         * 
         */
        public Builder syntax(String syntax) {
            return syntax(Output.of(syntax));
        }

        /**
         * @param teamId Team ID.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId Team ID.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param template Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<String> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
         * 
         * @return builder
         * 
         */
        public Builder template(String template) {
            return template(Output.of(template));
        }

        public Builder tenantDomain(@Nullable Output<String> tenantDomain) {
            $.tenantDomain = tenantDomain;
            return this;
        }

        public Builder tenantDomain(String tenantDomain) {
            return tenantDomain(Output.of(tenantDomain));
        }

        public Builder tokenEndpoint(@Nullable Output<String> tokenEndpoint) {
            $.tokenEndpoint = tokenEndpoint;
            return this;
        }

        public Builder tokenEndpoint(String tokenEndpoint) {
            return tokenEndpoint(Output.of(tokenEndpoint));
        }

        /**
         * @param totp Configuration options for one-time passwords. For details, see TOTP.
         * 
         * @return builder
         * 
         */
        public Builder totp(@Nullable Output<ConnectionOptionsTotpArgs> totp) {
            $.totp = totp;
            return this;
        }

        /**
         * @param totp Configuration options for one-time passwords. For details, see TOTP.
         * 
         * @return builder
         * 
         */
        public Builder totp(ConnectionOptionsTotpArgs totp) {
            return totp(Output.of(totp));
        }

        /**
         * @param twilioSid SID for your Twilio account.
         * 
         * @return builder
         * 
         */
        public Builder twilioSid(@Nullable Output<String> twilioSid) {
            $.twilioSid = twilioSid;
            return this;
        }

        /**
         * @param twilioSid SID for your Twilio account.
         * 
         * @return builder
         * 
         */
        public Builder twilioSid(String twilioSid) {
            return twilioSid(Output.of(twilioSid));
        }

        /**
         * @param twilioToken AuthToken for your Twilio account.
         * 
         * @return builder
         * 
         */
        public Builder twilioToken(@Nullable Output<String> twilioToken) {
            $.twilioToken = twilioToken;
            return this;
        }

        /**
         * @param twilioToken AuthToken for your Twilio account.
         * 
         * @return builder
         * 
         */
        public Builder twilioToken(String twilioToken) {
            return twilioToken(Output.of(twilioToken));
        }

        /**
         * @param type Value can be `back_channel` or `front_channel`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Value can be `back_channel` or `front_channel`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param upstreamParams String (JSON Encoded). You can pass provider-specific parameters to an Identity Provider during authentication. The values can either be static per connection or dynamic per user.
         * 
         * @return builder
         * 
         */
        public Builder upstreamParams(@Nullable Output<String> upstreamParams) {
            $.upstreamParams = upstreamParams;
            return this;
        }

        /**
         * @param upstreamParams String (JSON Encoded). You can pass provider-specific parameters to an Identity Provider during authentication. The values can either be static per connection or dynamic per user.
         * 
         * @return builder
         * 
         */
        public Builder upstreamParams(String upstreamParams) {
            return upstreamParams(Output.of(upstreamParams));
        }

        public Builder useCertAuth(@Nullable Output<Boolean> useCertAuth) {
            $.useCertAuth = useCertAuth;
            return this;
        }

        public Builder useCertAuth(Boolean useCertAuth) {
            return useCertAuth(Output.of(useCertAuth));
        }

        public Builder useKerberos(@Nullable Output<Boolean> useKerberos) {
            $.useKerberos = useKerberos;
            return this;
        }

        public Builder useKerberos(Boolean useKerberos) {
            return useKerberos(Output.of(useKerberos));
        }

        public Builder useWsfed(@Nullable Output<Boolean> useWsfed) {
            $.useWsfed = useWsfed;
            return this;
        }

        public Builder useWsfed(Boolean useWsfed) {
            return useWsfed(Output.of(useWsfed));
        }

        /**
         * @param userIdAttribute Attribute in the SAML token that will be mapped to the user_id property in Auth0.
         * 
         * @return builder
         * 
         */
        public Builder userIdAttribute(@Nullable Output<String> userIdAttribute) {
            $.userIdAttribute = userIdAttribute;
            return this;
        }

        /**
         * @param userIdAttribute Attribute in the SAML token that will be mapped to the user_id property in Auth0.
         * 
         * @return builder
         * 
         */
        public Builder userIdAttribute(String userIdAttribute) {
            return userIdAttribute(Output.of(userIdAttribute));
        }

        public Builder userinfoEndpoint(@Nullable Output<String> userinfoEndpoint) {
            $.userinfoEndpoint = userinfoEndpoint;
            return this;
        }

        public Builder userinfoEndpoint(String userinfoEndpoint) {
            return userinfoEndpoint(Output.of(userinfoEndpoint));
        }

        /**
         * @param validation Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
         * 
         * @return builder
         * 
         */
        public Builder validation(@Nullable Output<ConnectionOptionsValidationArgs> validation) {
            $.validation = validation;
            return this;
        }

        /**
         * @param validation Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
         * 
         * @return builder
         * 
         */
        public Builder validation(ConnectionOptionsValidationArgs validation) {
            return validation(Output.of(validation));
        }

        /**
         * @param waadCommonEndpoint Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you&#39;re using this for a multi-tenant application in Azure AD.
         * 
         * @return builder
         * 
         */
        public Builder waadCommonEndpoint(@Nullable Output<Boolean> waadCommonEndpoint) {
            $.waadCommonEndpoint = waadCommonEndpoint;
            return this;
        }

        /**
         * @param waadCommonEndpoint Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you&#39;re using this for a multi-tenant application in Azure AD.
         * 
         * @return builder
         * 
         */
        public Builder waadCommonEndpoint(Boolean waadCommonEndpoint) {
            return waadCommonEndpoint(Output.of(waadCommonEndpoint));
        }

        public Builder waadProtocol(@Nullable Output<String> waadProtocol) {
            $.waadProtocol = waadProtocol;
            return this;
        }

        public Builder waadProtocol(String waadProtocol) {
            return waadProtocol(Output.of(waadProtocol));
        }

        public ConnectionOptionsArgs build() {
            return $;
        }
    }

}
