// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrandingThemeColorsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrandingThemeColorsArgs Empty = new BrandingThemeColorsArgs();

    /**
     * Base focus color.
     * 
     */
    @Import(name="baseFocusColor")
    private @Nullable Output<String> baseFocusColor;

    /**
     * @return Base focus color.
     * 
     */
    public Optional<Output<String>> baseFocusColor() {
        return Optional.ofNullable(this.baseFocusColor);
    }

    /**
     * Base hover color.
     * 
     */
    @Import(name="baseHoverColor")
    private @Nullable Output<String> baseHoverColor;

    /**
     * @return Base hover color.
     * 
     */
    public Optional<Output<String>> baseHoverColor() {
        return Optional.ofNullable(this.baseHoverColor);
    }

    /**
     * Body text.
     * 
     */
    @Import(name="bodyText", required=true)
    private Output<String> bodyText;

    /**
     * @return Body text.
     * 
     */
    public Output<String> bodyText() {
        return this.bodyText;
    }

    /**
     * Error.
     * 
     */
    @Import(name="error", required=true)
    private Output<String> error;

    /**
     * @return Error.
     * 
     */
    public Output<String> error() {
        return this.error;
    }

    /**
     * Header.
     * 
     */
    @Import(name="header", required=true)
    private Output<String> header;

    /**
     * @return Header.
     * 
     */
    public Output<String> header() {
        return this.header;
    }

    /**
     * Icons.
     * 
     */
    @Import(name="icons", required=true)
    private Output<String> icons;

    /**
     * @return Icons.
     * 
     */
    public Output<String> icons() {
        return this.icons;
    }

    /**
     * Input background.
     * 
     */
    @Import(name="inputBackground", required=true)
    private Output<String> inputBackground;

    /**
     * @return Input background.
     * 
     */
    public Output<String> inputBackground() {
        return this.inputBackground;
    }

    /**
     * Input border.
     * 
     */
    @Import(name="inputBorder", required=true)
    private Output<String> inputBorder;

    /**
     * @return Input border.
     * 
     */
    public Output<String> inputBorder() {
        return this.inputBorder;
    }

    /**
     * Input filled text.
     * 
     */
    @Import(name="inputFilledText", required=true)
    private Output<String> inputFilledText;

    /**
     * @return Input filled text.
     * 
     */
    public Output<String> inputFilledText() {
        return this.inputFilledText;
    }

    /**
     * Input labels &amp; placeholders.
     * 
     */
    @Import(name="inputLabelsPlaceholders", required=true)
    private Output<String> inputLabelsPlaceholders;

    /**
     * @return Input labels &amp; placeholders.
     * 
     */
    public Output<String> inputLabelsPlaceholders() {
        return this.inputLabelsPlaceholders;
    }

    /**
     * Links &amp; focused components.
     * 
     */
    @Import(name="linksFocusedComponents", required=true)
    private Output<String> linksFocusedComponents;

    /**
     * @return Links &amp; focused components.
     * 
     */
    public Output<String> linksFocusedComponents() {
        return this.linksFocusedComponents;
    }

    /**
     * Primary button.
     * 
     */
    @Import(name="primaryButton", required=true)
    private Output<String> primaryButton;

    /**
     * @return Primary button.
     * 
     */
    public Output<String> primaryButton() {
        return this.primaryButton;
    }

    /**
     * Primary button label.
     * 
     */
    @Import(name="primaryButtonLabel", required=true)
    private Output<String> primaryButtonLabel;

    /**
     * @return Primary button label.
     * 
     */
    public Output<String> primaryButtonLabel() {
        return this.primaryButtonLabel;
    }

    /**
     * Secondary button border.
     * 
     */
    @Import(name="secondaryButtonBorder", required=true)
    private Output<String> secondaryButtonBorder;

    /**
     * @return Secondary button border.
     * 
     */
    public Output<String> secondaryButtonBorder() {
        return this.secondaryButtonBorder;
    }

    /**
     * Secondary button label.
     * 
     */
    @Import(name="secondaryButtonLabel", required=true)
    private Output<String> secondaryButtonLabel;

    /**
     * @return Secondary button label.
     * 
     */
    public Output<String> secondaryButtonLabel() {
        return this.secondaryButtonLabel;
    }

    /**
     * Success.
     * 
     */
    @Import(name="success", required=true)
    private Output<String> success;

    /**
     * @return Success.
     * 
     */
    public Output<String> success() {
        return this.success;
    }

    /**
     * Widget background.
     * 
     */
    @Import(name="widgetBackground", required=true)
    private Output<String> widgetBackground;

    /**
     * @return Widget background.
     * 
     */
    public Output<String> widgetBackground() {
        return this.widgetBackground;
    }

    /**
     * Widget border.
     * 
     */
    @Import(name="widgetBorder", required=true)
    private Output<String> widgetBorder;

    /**
     * @return Widget border.
     * 
     */
    public Output<String> widgetBorder() {
        return this.widgetBorder;
    }

    private BrandingThemeColorsArgs() {}

    private BrandingThemeColorsArgs(BrandingThemeColorsArgs $) {
        this.baseFocusColor = $.baseFocusColor;
        this.baseHoverColor = $.baseHoverColor;
        this.bodyText = $.bodyText;
        this.error = $.error;
        this.header = $.header;
        this.icons = $.icons;
        this.inputBackground = $.inputBackground;
        this.inputBorder = $.inputBorder;
        this.inputFilledText = $.inputFilledText;
        this.inputLabelsPlaceholders = $.inputLabelsPlaceholders;
        this.linksFocusedComponents = $.linksFocusedComponents;
        this.primaryButton = $.primaryButton;
        this.primaryButtonLabel = $.primaryButtonLabel;
        this.secondaryButtonBorder = $.secondaryButtonBorder;
        this.secondaryButtonLabel = $.secondaryButtonLabel;
        this.success = $.success;
        this.widgetBackground = $.widgetBackground;
        this.widgetBorder = $.widgetBorder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrandingThemeColorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrandingThemeColorsArgs $;

        public Builder() {
            $ = new BrandingThemeColorsArgs();
        }

        public Builder(BrandingThemeColorsArgs defaults) {
            $ = new BrandingThemeColorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseFocusColor Base focus color.
         * 
         * @return builder
         * 
         */
        public Builder baseFocusColor(@Nullable Output<String> baseFocusColor) {
            $.baseFocusColor = baseFocusColor;
            return this;
        }

        /**
         * @param baseFocusColor Base focus color.
         * 
         * @return builder
         * 
         */
        public Builder baseFocusColor(String baseFocusColor) {
            return baseFocusColor(Output.of(baseFocusColor));
        }

        /**
         * @param baseHoverColor Base hover color.
         * 
         * @return builder
         * 
         */
        public Builder baseHoverColor(@Nullable Output<String> baseHoverColor) {
            $.baseHoverColor = baseHoverColor;
            return this;
        }

        /**
         * @param baseHoverColor Base hover color.
         * 
         * @return builder
         * 
         */
        public Builder baseHoverColor(String baseHoverColor) {
            return baseHoverColor(Output.of(baseHoverColor));
        }

        /**
         * @param bodyText Body text.
         * 
         * @return builder
         * 
         */
        public Builder bodyText(Output<String> bodyText) {
            $.bodyText = bodyText;
            return this;
        }

        /**
         * @param bodyText Body text.
         * 
         * @return builder
         * 
         */
        public Builder bodyText(String bodyText) {
            return bodyText(Output.of(bodyText));
        }

        /**
         * @param error Error.
         * 
         * @return builder
         * 
         */
        public Builder error(Output<String> error) {
            $.error = error;
            return this;
        }

        /**
         * @param error Error.
         * 
         * @return builder
         * 
         */
        public Builder error(String error) {
            return error(Output.of(error));
        }

        /**
         * @param header Header.
         * 
         * @return builder
         * 
         */
        public Builder header(Output<String> header) {
            $.header = header;
            return this;
        }

        /**
         * @param header Header.
         * 
         * @return builder
         * 
         */
        public Builder header(String header) {
            return header(Output.of(header));
        }

        /**
         * @param icons Icons.
         * 
         * @return builder
         * 
         */
        public Builder icons(Output<String> icons) {
            $.icons = icons;
            return this;
        }

        /**
         * @param icons Icons.
         * 
         * @return builder
         * 
         */
        public Builder icons(String icons) {
            return icons(Output.of(icons));
        }

        /**
         * @param inputBackground Input background.
         * 
         * @return builder
         * 
         */
        public Builder inputBackground(Output<String> inputBackground) {
            $.inputBackground = inputBackground;
            return this;
        }

        /**
         * @param inputBackground Input background.
         * 
         * @return builder
         * 
         */
        public Builder inputBackground(String inputBackground) {
            return inputBackground(Output.of(inputBackground));
        }

        /**
         * @param inputBorder Input border.
         * 
         * @return builder
         * 
         */
        public Builder inputBorder(Output<String> inputBorder) {
            $.inputBorder = inputBorder;
            return this;
        }

        /**
         * @param inputBorder Input border.
         * 
         * @return builder
         * 
         */
        public Builder inputBorder(String inputBorder) {
            return inputBorder(Output.of(inputBorder));
        }

        /**
         * @param inputFilledText Input filled text.
         * 
         * @return builder
         * 
         */
        public Builder inputFilledText(Output<String> inputFilledText) {
            $.inputFilledText = inputFilledText;
            return this;
        }

        /**
         * @param inputFilledText Input filled text.
         * 
         * @return builder
         * 
         */
        public Builder inputFilledText(String inputFilledText) {
            return inputFilledText(Output.of(inputFilledText));
        }

        /**
         * @param inputLabelsPlaceholders Input labels &amp; placeholders.
         * 
         * @return builder
         * 
         */
        public Builder inputLabelsPlaceholders(Output<String> inputLabelsPlaceholders) {
            $.inputLabelsPlaceholders = inputLabelsPlaceholders;
            return this;
        }

        /**
         * @param inputLabelsPlaceholders Input labels &amp; placeholders.
         * 
         * @return builder
         * 
         */
        public Builder inputLabelsPlaceholders(String inputLabelsPlaceholders) {
            return inputLabelsPlaceholders(Output.of(inputLabelsPlaceholders));
        }

        /**
         * @param linksFocusedComponents Links &amp; focused components.
         * 
         * @return builder
         * 
         */
        public Builder linksFocusedComponents(Output<String> linksFocusedComponents) {
            $.linksFocusedComponents = linksFocusedComponents;
            return this;
        }

        /**
         * @param linksFocusedComponents Links &amp; focused components.
         * 
         * @return builder
         * 
         */
        public Builder linksFocusedComponents(String linksFocusedComponents) {
            return linksFocusedComponents(Output.of(linksFocusedComponents));
        }

        /**
         * @param primaryButton Primary button.
         * 
         * @return builder
         * 
         */
        public Builder primaryButton(Output<String> primaryButton) {
            $.primaryButton = primaryButton;
            return this;
        }

        /**
         * @param primaryButton Primary button.
         * 
         * @return builder
         * 
         */
        public Builder primaryButton(String primaryButton) {
            return primaryButton(Output.of(primaryButton));
        }

        /**
         * @param primaryButtonLabel Primary button label.
         * 
         * @return builder
         * 
         */
        public Builder primaryButtonLabel(Output<String> primaryButtonLabel) {
            $.primaryButtonLabel = primaryButtonLabel;
            return this;
        }

        /**
         * @param primaryButtonLabel Primary button label.
         * 
         * @return builder
         * 
         */
        public Builder primaryButtonLabel(String primaryButtonLabel) {
            return primaryButtonLabel(Output.of(primaryButtonLabel));
        }

        /**
         * @param secondaryButtonBorder Secondary button border.
         * 
         * @return builder
         * 
         */
        public Builder secondaryButtonBorder(Output<String> secondaryButtonBorder) {
            $.secondaryButtonBorder = secondaryButtonBorder;
            return this;
        }

        /**
         * @param secondaryButtonBorder Secondary button border.
         * 
         * @return builder
         * 
         */
        public Builder secondaryButtonBorder(String secondaryButtonBorder) {
            return secondaryButtonBorder(Output.of(secondaryButtonBorder));
        }

        /**
         * @param secondaryButtonLabel Secondary button label.
         * 
         * @return builder
         * 
         */
        public Builder secondaryButtonLabel(Output<String> secondaryButtonLabel) {
            $.secondaryButtonLabel = secondaryButtonLabel;
            return this;
        }

        /**
         * @param secondaryButtonLabel Secondary button label.
         * 
         * @return builder
         * 
         */
        public Builder secondaryButtonLabel(String secondaryButtonLabel) {
            return secondaryButtonLabel(Output.of(secondaryButtonLabel));
        }

        /**
         * @param success Success.
         * 
         * @return builder
         * 
         */
        public Builder success(Output<String> success) {
            $.success = success;
            return this;
        }

        /**
         * @param success Success.
         * 
         * @return builder
         * 
         */
        public Builder success(String success) {
            return success(Output.of(success));
        }

        /**
         * @param widgetBackground Widget background.
         * 
         * @return builder
         * 
         */
        public Builder widgetBackground(Output<String> widgetBackground) {
            $.widgetBackground = widgetBackground;
            return this;
        }

        /**
         * @param widgetBackground Widget background.
         * 
         * @return builder
         * 
         */
        public Builder widgetBackground(String widgetBackground) {
            return widgetBackground(Output.of(widgetBackground));
        }

        /**
         * @param widgetBorder Widget border.
         * 
         * @return builder
         * 
         */
        public Builder widgetBorder(Output<String> widgetBorder) {
            $.widgetBorder = widgetBorder;
            return this;
        }

        /**
         * @param widgetBorder Widget border.
         * 
         * @return builder
         * 
         */
        public Builder widgetBorder(String widgetBorder) {
            return widgetBorder(Output.of(widgetBorder));
        }

        public BrandingThemeColorsArgs build() {
            $.bodyText = Objects.requireNonNull($.bodyText, "expected parameter 'bodyText' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.header = Objects.requireNonNull($.header, "expected parameter 'header' to be non-null");
            $.icons = Objects.requireNonNull($.icons, "expected parameter 'icons' to be non-null");
            $.inputBackground = Objects.requireNonNull($.inputBackground, "expected parameter 'inputBackground' to be non-null");
            $.inputBorder = Objects.requireNonNull($.inputBorder, "expected parameter 'inputBorder' to be non-null");
            $.inputFilledText = Objects.requireNonNull($.inputFilledText, "expected parameter 'inputFilledText' to be non-null");
            $.inputLabelsPlaceholders = Objects.requireNonNull($.inputLabelsPlaceholders, "expected parameter 'inputLabelsPlaceholders' to be non-null");
            $.linksFocusedComponents = Objects.requireNonNull($.linksFocusedComponents, "expected parameter 'linksFocusedComponents' to be non-null");
            $.primaryButton = Objects.requireNonNull($.primaryButton, "expected parameter 'primaryButton' to be non-null");
            $.primaryButtonLabel = Objects.requireNonNull($.primaryButtonLabel, "expected parameter 'primaryButtonLabel' to be non-null");
            $.secondaryButtonBorder = Objects.requireNonNull($.secondaryButtonBorder, "expected parameter 'secondaryButtonBorder' to be non-null");
            $.secondaryButtonLabel = Objects.requireNonNull($.secondaryButtonLabel, "expected parameter 'secondaryButtonLabel' to be non-null");
            $.success = Objects.requireNonNull($.success, "expected parameter 'success' to be non-null");
            $.widgetBackground = Objects.requireNonNull($.widgetBackground, "expected parameter 'widgetBackground' to be non-null");
            $.widgetBorder = Objects.requireNonNull($.widgetBorder, "expected parameter 'widgetBorder' to be non-null");
            return $;
        }
    }

}
