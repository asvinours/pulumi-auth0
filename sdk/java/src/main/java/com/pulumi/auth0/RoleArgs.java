// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.inputs.RolePermissionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleArgs Empty = new RoleArgs();

    /**
     * String. Description of the role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return String. Description of the role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * String. Name for this role.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return String. Name for this role.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set(Resource). Configuration settings for permissions (scopes) attached to the role.
     * For details, see Permissions.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<RolePermissionArgs>> permissions;

    /**
     * @return Set(Resource). Configuration settings for permissions (scopes) attached to the role.
     * For details, see Permissions.
     * 
     */
    public Optional<Output<List<RolePermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    private RoleArgs() {}

    private RoleArgs(RoleArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleArgs $;

        public Builder() {
            $ = new RoleArgs();
        }

        public Builder(RoleArgs defaults) {
            $ = new RoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description String. Description of the role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description String. Description of the role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name String. Name for this role.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name String. Name for this role.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions Set(Resource). Configuration settings for permissions (scopes) attached to the role.
         * For details, see Permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<RolePermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Set(Resource). Configuration settings for permissions (scopes) attached to the role.
         * For details, see Permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<RolePermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions Set(Resource). Configuration settings for permissions (scopes) attached to the role.
         * For details, see Permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissions(RolePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public RoleArgs build() {
            $.description = Codegen.stringProp("description").output().arg($.description).def("Managed by Pulumi").getNullable();
            return $;
        }
    }

}
