// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.LogStreamSinkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogStreamState extends com.pulumi.resources.ResourceArgs {

    public static final LogStreamState Empty = new LogStreamState();

    /**
     * Only logs events matching these filters will be delivered by the stream.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<Map<String,String>>> filters;

    /**
     * @return Only logs events matching these filters will be delivered by the stream.
     * 
     */
    public Optional<Output<List<Map<String,String>>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Name of the log stream
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the log stream
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List(Resource) The sink configuration for the log stream. For details, see Sink Configuration.
     * 
     */
    @Import(name="sink")
    private @Nullable Output<LogStreamSinkArgs> sink;

    /**
     * @return List(Resource) The sink configuration for the log stream. For details, see Sink Configuration.
     * 
     */
    public Optional<Output<LogStreamSinkArgs>> sink() {
        return Optional.ofNullable(this.sink);
    }

    /**
     * The current status of the log stream. Options are &#34;active&#34;, &#34;paused&#34;, &#34;suspended&#34;
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current status of the log stream. Options are &#34;active&#34;, &#34;paused&#34;, &#34;suspended&#34;
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The type of log stream. Options are &#34;eventbridge&#34;, &#34;eventgrid&#34;, &#34;http&#34;, &#34;datadog&#34;, &#34;splunk&#34;, &#34;sumo&#34;
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of log stream. Options are &#34;eventbridge&#34;, &#34;eventgrid&#34;, &#34;http&#34;, &#34;datadog&#34;, &#34;splunk&#34;, &#34;sumo&#34;
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LogStreamState() {}

    private LogStreamState(LogStreamState $) {
        this.filters = $.filters;
        this.name = $.name;
        this.sink = $.sink;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogStreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogStreamState $;

        public Builder() {
            $ = new LogStreamState();
        }

        public Builder(LogStreamState defaults) {
            $ = new LogStreamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters Only logs events matching these filters will be delivered by the stream.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<Map<String,String>>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Only logs events matching these filters will be delivered by the stream.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<Map<String,String>> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Only logs events matching these filters will be delivered by the stream.
         * 
         * @return builder
         * 
         */
        public Builder filters(Map<String,String>... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name Name of the log stream
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the log stream
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sink List(Resource) The sink configuration for the log stream. For details, see Sink Configuration.
         * 
         * @return builder
         * 
         */
        public Builder sink(@Nullable Output<LogStreamSinkArgs> sink) {
            $.sink = sink;
            return this;
        }

        /**
         * @param sink List(Resource) The sink configuration for the log stream. For details, see Sink Configuration.
         * 
         * @return builder
         * 
         */
        public Builder sink(LogStreamSinkArgs sink) {
            return sink(Output.of(sink));
        }

        /**
         * @param status The current status of the log stream. Options are &#34;active&#34;, &#34;paused&#34;, &#34;suspended&#34;
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of the log stream. Options are &#34;active&#34;, &#34;paused&#34;, &#34;suspended&#34;
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type The type of log stream. Options are &#34;eventbridge&#34;, &#34;eventgrid&#34;, &#34;http&#34;, &#34;datadog&#34;, &#34;splunk&#34;, &#34;sumo&#34;
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of log stream. Options are &#34;eventbridge&#34;, &#34;eventgrid&#34;, &#34;http&#34;, &#34;datadog&#34;, &#34;splunk&#34;, &#34;sumo&#34;
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LogStreamState build() {
            return $;
        }
    }

}
