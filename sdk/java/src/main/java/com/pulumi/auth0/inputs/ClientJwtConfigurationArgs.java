// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientJwtConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientJwtConfigurationArgs Empty = new ClientJwtConfigurationArgs();

    /**
     * String. Algorithm used to sign JWTs.
     * 
     */
    @Import(name="alg")
    private @Nullable Output<String> alg;

    /**
     * @return String. Algorithm used to sign JWTs.
     * 
     */
    public Optional<Output<String>> alg() {
        return Optional.ofNullable(this.alg);
    }

    /**
     * Integer. Number of seconds during which the JWT will be valid.
     * 
     */
    @Import(name="lifetimeInSeconds")
    private @Nullable Output<Integer> lifetimeInSeconds;

    /**
     * @return Integer. Number of seconds during which the JWT will be valid.
     * 
     */
    public Optional<Output<Integer>> lifetimeInSeconds() {
        return Optional.ofNullable(this.lifetimeInSeconds);
    }

    /**
     * Map(String). Permissions (scopes) included in JWTs.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<Map<String,String>> scopes;

    /**
     * @return Map(String). Permissions (scopes) included in JWTs.
     * 
     */
    public Optional<Output<Map<String,String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Boolean. Indicates whether or not the client secret is base64 encoded.
     * 
     */
    @Import(name="secretEncoded")
    private @Nullable Output<Boolean> secretEncoded;

    /**
     * @return Boolean. Indicates whether or not the client secret is base64 encoded.
     * 
     */
    public Optional<Output<Boolean>> secretEncoded() {
        return Optional.ofNullable(this.secretEncoded);
    }

    private ClientJwtConfigurationArgs() {}

    private ClientJwtConfigurationArgs(ClientJwtConfigurationArgs $) {
        this.alg = $.alg;
        this.lifetimeInSeconds = $.lifetimeInSeconds;
        this.scopes = $.scopes;
        this.secretEncoded = $.secretEncoded;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientJwtConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientJwtConfigurationArgs $;

        public Builder() {
            $ = new ClientJwtConfigurationArgs();
        }

        public Builder(ClientJwtConfigurationArgs defaults) {
            $ = new ClientJwtConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alg String. Algorithm used to sign JWTs.
         * 
         * @return builder
         * 
         */
        public Builder alg(@Nullable Output<String> alg) {
            $.alg = alg;
            return this;
        }

        /**
         * @param alg String. Algorithm used to sign JWTs.
         * 
         * @return builder
         * 
         */
        public Builder alg(String alg) {
            return alg(Output.of(alg));
        }

        /**
         * @param lifetimeInSeconds Integer. Number of seconds during which the JWT will be valid.
         * 
         * @return builder
         * 
         */
        public Builder lifetimeInSeconds(@Nullable Output<Integer> lifetimeInSeconds) {
            $.lifetimeInSeconds = lifetimeInSeconds;
            return this;
        }

        /**
         * @param lifetimeInSeconds Integer. Number of seconds during which the JWT will be valid.
         * 
         * @return builder
         * 
         */
        public Builder lifetimeInSeconds(Integer lifetimeInSeconds) {
            return lifetimeInSeconds(Output.of(lifetimeInSeconds));
        }

        /**
         * @param scopes Map(String). Permissions (scopes) included in JWTs.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<Map<String,String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Map(String). Permissions (scopes) included in JWTs.
         * 
         * @return builder
         * 
         */
        public Builder scopes(Map<String,String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param secretEncoded Boolean. Indicates whether or not the client secret is base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder secretEncoded(@Nullable Output<Boolean> secretEncoded) {
            $.secretEncoded = secretEncoded;
            return this;
        }

        /**
         * @param secretEncoded Boolean. Indicates whether or not the client secret is base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder secretEncoded(Boolean secretEncoded) {
            return secretEncoded(Output.of(secretEncoded));
        }

        public ClientJwtConfigurationArgs build() {
            return $;
        }
    }

}
