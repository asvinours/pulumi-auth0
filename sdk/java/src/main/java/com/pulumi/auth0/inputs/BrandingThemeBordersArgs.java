// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class BrandingThemeBordersArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrandingThemeBordersArgs Empty = new BrandingThemeBordersArgs();

    /**
     * Button border radius. Value needs to be between `1` and `10`.
     * 
     */
    @Import(name="buttonBorderRadius", required=true)
    private Output<Double> buttonBorderRadius;

    /**
     * @return Button border radius. Value needs to be between `1` and `10`.
     * 
     */
    public Output<Double> buttonBorderRadius() {
        return this.buttonBorderRadius;
    }

    /**
     * Button border weight. Value needs to be between `0` and `10`.
     * 
     */
    @Import(name="buttonBorderWeight", required=true)
    private Output<Double> buttonBorderWeight;

    /**
     * @return Button border weight. Value needs to be between `0` and `10`.
     * 
     */
    public Output<Double> buttonBorderWeight() {
        return this.buttonBorderWeight;
    }

    /**
     * Buttons style. Available options: `pill`, `rounded`, `sharp`.
     * 
     */
    @Import(name="buttonsStyle", required=true)
    private Output<String> buttonsStyle;

    /**
     * @return Buttons style. Available options: `pill`, `rounded`, `sharp`.
     * 
     */
    public Output<String> buttonsStyle() {
        return this.buttonsStyle;
    }

    /**
     * Input border radius. Value needs to be between `0` and `10`.
     * 
     */
    @Import(name="inputBorderRadius", required=true)
    private Output<Double> inputBorderRadius;

    /**
     * @return Input border radius. Value needs to be between `0` and `10`.
     * 
     */
    public Output<Double> inputBorderRadius() {
        return this.inputBorderRadius;
    }

    /**
     * Input border weight. Value needs to be between `0` and `3`.
     * 
     */
    @Import(name="inputBorderWeight", required=true)
    private Output<Double> inputBorderWeight;

    /**
     * @return Input border weight. Value needs to be between `0` and `3`.
     * 
     */
    public Output<Double> inputBorderWeight() {
        return this.inputBorderWeight;
    }

    /**
     * Inputs style. Available options: `pill`, `rounded`, `sharp`.
     * 
     */
    @Import(name="inputsStyle", required=true)
    private Output<String> inputsStyle;

    /**
     * @return Inputs style. Available options: `pill`, `rounded`, `sharp`.
     * 
     */
    public Output<String> inputsStyle() {
        return this.inputsStyle;
    }

    /**
     * Show widget shadow.
     * 
     */
    @Import(name="showWidgetShadow", required=true)
    private Output<Boolean> showWidgetShadow;

    /**
     * @return Show widget shadow.
     * 
     */
    public Output<Boolean> showWidgetShadow() {
        return this.showWidgetShadow;
    }

    /**
     * Widget border weight. Value needs to be between `0` and `10`.
     * 
     */
    @Import(name="widgetBorderWeight", required=true)
    private Output<Double> widgetBorderWeight;

    /**
     * @return Widget border weight. Value needs to be between `0` and `10`.
     * 
     */
    public Output<Double> widgetBorderWeight() {
        return this.widgetBorderWeight;
    }

    /**
     * Widget corner radius. Value needs to be between `0` and `50`.
     * 
     */
    @Import(name="widgetCornerRadius", required=true)
    private Output<Double> widgetCornerRadius;

    /**
     * @return Widget corner radius. Value needs to be between `0` and `50`.
     * 
     */
    public Output<Double> widgetCornerRadius() {
        return this.widgetCornerRadius;
    }

    private BrandingThemeBordersArgs() {}

    private BrandingThemeBordersArgs(BrandingThemeBordersArgs $) {
        this.buttonBorderRadius = $.buttonBorderRadius;
        this.buttonBorderWeight = $.buttonBorderWeight;
        this.buttonsStyle = $.buttonsStyle;
        this.inputBorderRadius = $.inputBorderRadius;
        this.inputBorderWeight = $.inputBorderWeight;
        this.inputsStyle = $.inputsStyle;
        this.showWidgetShadow = $.showWidgetShadow;
        this.widgetBorderWeight = $.widgetBorderWeight;
        this.widgetCornerRadius = $.widgetCornerRadius;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrandingThemeBordersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrandingThemeBordersArgs $;

        public Builder() {
            $ = new BrandingThemeBordersArgs();
        }

        public Builder(BrandingThemeBordersArgs defaults) {
            $ = new BrandingThemeBordersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param buttonBorderRadius Button border radius. Value needs to be between `1` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder buttonBorderRadius(Output<Double> buttonBorderRadius) {
            $.buttonBorderRadius = buttonBorderRadius;
            return this;
        }

        /**
         * @param buttonBorderRadius Button border radius. Value needs to be between `1` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder buttonBorderRadius(Double buttonBorderRadius) {
            return buttonBorderRadius(Output.of(buttonBorderRadius));
        }

        /**
         * @param buttonBorderWeight Button border weight. Value needs to be between `0` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder buttonBorderWeight(Output<Double> buttonBorderWeight) {
            $.buttonBorderWeight = buttonBorderWeight;
            return this;
        }

        /**
         * @param buttonBorderWeight Button border weight. Value needs to be between `0` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder buttonBorderWeight(Double buttonBorderWeight) {
            return buttonBorderWeight(Output.of(buttonBorderWeight));
        }

        /**
         * @param buttonsStyle Buttons style. Available options: `pill`, `rounded`, `sharp`.
         * 
         * @return builder
         * 
         */
        public Builder buttonsStyle(Output<String> buttonsStyle) {
            $.buttonsStyle = buttonsStyle;
            return this;
        }

        /**
         * @param buttonsStyle Buttons style. Available options: `pill`, `rounded`, `sharp`.
         * 
         * @return builder
         * 
         */
        public Builder buttonsStyle(String buttonsStyle) {
            return buttonsStyle(Output.of(buttonsStyle));
        }

        /**
         * @param inputBorderRadius Input border radius. Value needs to be between `0` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder inputBorderRadius(Output<Double> inputBorderRadius) {
            $.inputBorderRadius = inputBorderRadius;
            return this;
        }

        /**
         * @param inputBorderRadius Input border radius. Value needs to be between `0` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder inputBorderRadius(Double inputBorderRadius) {
            return inputBorderRadius(Output.of(inputBorderRadius));
        }

        /**
         * @param inputBorderWeight Input border weight. Value needs to be between `0` and `3`.
         * 
         * @return builder
         * 
         */
        public Builder inputBorderWeight(Output<Double> inputBorderWeight) {
            $.inputBorderWeight = inputBorderWeight;
            return this;
        }

        /**
         * @param inputBorderWeight Input border weight. Value needs to be between `0` and `3`.
         * 
         * @return builder
         * 
         */
        public Builder inputBorderWeight(Double inputBorderWeight) {
            return inputBorderWeight(Output.of(inputBorderWeight));
        }

        /**
         * @param inputsStyle Inputs style. Available options: `pill`, `rounded`, `sharp`.
         * 
         * @return builder
         * 
         */
        public Builder inputsStyle(Output<String> inputsStyle) {
            $.inputsStyle = inputsStyle;
            return this;
        }

        /**
         * @param inputsStyle Inputs style. Available options: `pill`, `rounded`, `sharp`.
         * 
         * @return builder
         * 
         */
        public Builder inputsStyle(String inputsStyle) {
            return inputsStyle(Output.of(inputsStyle));
        }

        /**
         * @param showWidgetShadow Show widget shadow.
         * 
         * @return builder
         * 
         */
        public Builder showWidgetShadow(Output<Boolean> showWidgetShadow) {
            $.showWidgetShadow = showWidgetShadow;
            return this;
        }

        /**
         * @param showWidgetShadow Show widget shadow.
         * 
         * @return builder
         * 
         */
        public Builder showWidgetShadow(Boolean showWidgetShadow) {
            return showWidgetShadow(Output.of(showWidgetShadow));
        }

        /**
         * @param widgetBorderWeight Widget border weight. Value needs to be between `0` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder widgetBorderWeight(Output<Double> widgetBorderWeight) {
            $.widgetBorderWeight = widgetBorderWeight;
            return this;
        }

        /**
         * @param widgetBorderWeight Widget border weight. Value needs to be between `0` and `10`.
         * 
         * @return builder
         * 
         */
        public Builder widgetBorderWeight(Double widgetBorderWeight) {
            return widgetBorderWeight(Output.of(widgetBorderWeight));
        }

        /**
         * @param widgetCornerRadius Widget corner radius. Value needs to be between `0` and `50`.
         * 
         * @return builder
         * 
         */
        public Builder widgetCornerRadius(Output<Double> widgetCornerRadius) {
            $.widgetCornerRadius = widgetCornerRadius;
            return this;
        }

        /**
         * @param widgetCornerRadius Widget corner radius. Value needs to be between `0` and `50`.
         * 
         * @return builder
         * 
         */
        public Builder widgetCornerRadius(Double widgetCornerRadius) {
            return widgetCornerRadius(Output.of(widgetCornerRadius));
        }

        public BrandingThemeBordersArgs build() {
            $.buttonBorderRadius = Objects.requireNonNull($.buttonBorderRadius, "expected parameter 'buttonBorderRadius' to be non-null");
            $.buttonBorderWeight = Objects.requireNonNull($.buttonBorderWeight, "expected parameter 'buttonBorderWeight' to be non-null");
            $.buttonsStyle = Objects.requireNonNull($.buttonsStyle, "expected parameter 'buttonsStyle' to be non-null");
            $.inputBorderRadius = Objects.requireNonNull($.inputBorderRadius, "expected parameter 'inputBorderRadius' to be non-null");
            $.inputBorderWeight = Objects.requireNonNull($.inputBorderWeight, "expected parameter 'inputBorderWeight' to be non-null");
            $.inputsStyle = Objects.requireNonNull($.inputsStyle, "expected parameter 'inputsStyle' to be non-null");
            $.showWidgetShadow = Objects.requireNonNull($.showWidgetShadow, "expected parameter 'showWidgetShadow' to be non-null");
            $.widgetBorderWeight = Objects.requireNonNull($.widgetBorderWeight, "expected parameter 'widgetBorderWeight' to be non-null");
            $.widgetCornerRadius = Objects.requireNonNull($.widgetCornerRadius, "expected parameter 'widgetCornerRadius' to be non-null");
            return $;
        }
    }

}
