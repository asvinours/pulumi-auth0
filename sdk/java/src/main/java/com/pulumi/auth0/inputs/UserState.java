// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * String, JSON format. Custom fields that store info about the user that impact the user&#39;s core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
     * 
     */
    @Import(name="appMetadata")
    private @Nullable Output<String> appMetadata;

    /**
     * @return String, JSON format. Custom fields that store info about the user that impact the user&#39;s core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
     * 
     */
    public Optional<Output<String>> appMetadata() {
        return Optional.ofNullable(this.appMetadata);
    }

    @Import(name="blocked")
    private @Nullable Output<Boolean> blocked;

    public Optional<Output<Boolean>> blocked() {
        return Optional.ofNullable(this.blocked);
    }

    /**
     * String. Name of the connection from which the user information was sourced.
     * 
     */
    @Import(name="connectionName")
    private @Nullable Output<String> connectionName;

    /**
     * @return String. Name of the connection from which the user information was sourced.
     * 
     */
    public Optional<Output<String>> connectionName() {
        return Optional.ofNullable(this.connectionName);
    }

    /**
     * String. Email address of the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return String. Email address of the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Boolean. Indicates whether the email address has been verified.
     * 
     */
    @Import(name="emailVerified")
    private @Nullable Output<Boolean> emailVerified;

    /**
     * @return Boolean. Indicates whether the email address has been verified.
     * 
     */
    public Optional<Output<Boolean>> emailVerified() {
        return Optional.ofNullable(this.emailVerified);
    }

    @Import(name="familyName")
    private @Nullable Output<String> familyName;

    public Optional<Output<String>> familyName() {
        return Optional.ofNullable(this.familyName);
    }

    @Import(name="givenName")
    private @Nullable Output<String> givenName;

    public Optional<Output<String>> givenName() {
        return Optional.ofNullable(this.givenName);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * String. Preferred nickname or alias of the user.
     * 
     */
    @Import(name="nickname")
    private @Nullable Output<String> nickname;

    /**
     * @return String. Preferred nickname or alias of the user.
     * 
     */
    public Optional<Output<String>> nickname() {
        return Optional.ofNullable(this.nickname);
    }

    /**
     * String, Case-sensitive. Initial password for this user. Required for non-passwordless connections (SMS and email).
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return String, Case-sensitive. Initial password for this user. Required for non-passwordless connections (SMS and email).
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * String. Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
     * 
     */
    @Import(name="phoneNumber")
    private @Nullable Output<String> phoneNumber;

    /**
     * @return String. Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
     * 
     */
    public Optional<Output<String>> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }

    /**
     * Boolean. Indicates whether the phone number has been verified.
     * 
     */
    @Import(name="phoneVerified")
    private @Nullable Output<Boolean> phoneVerified;

    /**
     * @return Boolean. Indicates whether the phone number has been verified.
     * 
     */
    public Optional<Output<Boolean>> phoneVerified() {
        return Optional.ofNullable(this.phoneVerified);
    }

    @Import(name="picture")
    private @Nullable Output<String> picture;

    public Optional<Output<String>> picture() {
        return Optional.ofNullable(this.picture);
    }

    /**
     * Set(String). Set of IDs of roles assigned to the user.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return Set(String). Set of IDs of roles assigned to the user.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * String. ID of the user.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return String. ID of the user.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * String, JSON format. Custom fields that store info about the user that does not impact a user&#39;s core functionality. Examples include work address, home address, and user preferences.
     * 
     */
    @Import(name="userMetadata")
    private @Nullable Output<String> userMetadata;

    /**
     * @return String, JSON format. Custom fields that store info about the user that does not impact a user&#39;s core functionality. Examples include work address, home address, and user preferences.
     * 
     */
    public Optional<Output<String>> userMetadata() {
        return Optional.ofNullable(this.userMetadata);
    }

    /**
     * String. Username of the user. Only valid if the connection requires a username.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return String. Username of the user. Only valid if the connection requires a username.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Boolean. Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
     * 
     */
    @Import(name="verifyEmail")
    private @Nullable Output<Boolean> verifyEmail;

    /**
     * @return Boolean. Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
     * 
     */
    public Optional<Output<Boolean>> verifyEmail() {
        return Optional.ofNullable(this.verifyEmail);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.appMetadata = $.appMetadata;
        this.blocked = $.blocked;
        this.connectionName = $.connectionName;
        this.email = $.email;
        this.emailVerified = $.emailVerified;
        this.familyName = $.familyName;
        this.givenName = $.givenName;
        this.name = $.name;
        this.nickname = $.nickname;
        this.password = $.password;
        this.phoneNumber = $.phoneNumber;
        this.phoneVerified = $.phoneVerified;
        this.picture = $.picture;
        this.roles = $.roles;
        this.userId = $.userId;
        this.userMetadata = $.userMetadata;
        this.username = $.username;
        this.verifyEmail = $.verifyEmail;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appMetadata String, JSON format. Custom fields that store info about the user that impact the user&#39;s core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
         * 
         * @return builder
         * 
         */
        public Builder appMetadata(@Nullable Output<String> appMetadata) {
            $.appMetadata = appMetadata;
            return this;
        }

        /**
         * @param appMetadata String, JSON format. Custom fields that store info about the user that impact the user&#39;s core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
         * 
         * @return builder
         * 
         */
        public Builder appMetadata(String appMetadata) {
            return appMetadata(Output.of(appMetadata));
        }

        public Builder blocked(@Nullable Output<Boolean> blocked) {
            $.blocked = blocked;
            return this;
        }

        public Builder blocked(Boolean blocked) {
            return blocked(Output.of(blocked));
        }

        /**
         * @param connectionName String. Name of the connection from which the user information was sourced.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(@Nullable Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        /**
         * @param connectionName String. Name of the connection from which the user information was sourced.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        /**
         * @param email String. Email address of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email String. Email address of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param emailVerified Boolean. Indicates whether the email address has been verified.
         * 
         * @return builder
         * 
         */
        public Builder emailVerified(@Nullable Output<Boolean> emailVerified) {
            $.emailVerified = emailVerified;
            return this;
        }

        /**
         * @param emailVerified Boolean. Indicates whether the email address has been verified.
         * 
         * @return builder
         * 
         */
        public Builder emailVerified(Boolean emailVerified) {
            return emailVerified(Output.of(emailVerified));
        }

        public Builder familyName(@Nullable Output<String> familyName) {
            $.familyName = familyName;
            return this;
        }

        public Builder familyName(String familyName) {
            return familyName(Output.of(familyName));
        }

        public Builder givenName(@Nullable Output<String> givenName) {
            $.givenName = givenName;
            return this;
        }

        public Builder givenName(String givenName) {
            return givenName(Output.of(givenName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nickname String. Preferred nickname or alias of the user.
         * 
         * @return builder
         * 
         */
        public Builder nickname(@Nullable Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        /**
         * @param nickname String. Preferred nickname or alias of the user.
         * 
         * @return builder
         * 
         */
        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        /**
         * @param password String, Case-sensitive. Initial password for this user. Required for non-passwordless connections (SMS and email).
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password String, Case-sensitive. Initial password for this user. Required for non-passwordless connections (SMS and email).
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param phoneNumber String. Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(@Nullable Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber String. Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param phoneVerified Boolean. Indicates whether the phone number has been verified.
         * 
         * @return builder
         * 
         */
        public Builder phoneVerified(@Nullable Output<Boolean> phoneVerified) {
            $.phoneVerified = phoneVerified;
            return this;
        }

        /**
         * @param phoneVerified Boolean. Indicates whether the phone number has been verified.
         * 
         * @return builder
         * 
         */
        public Builder phoneVerified(Boolean phoneVerified) {
            return phoneVerified(Output.of(phoneVerified));
        }

        public Builder picture(@Nullable Output<String> picture) {
            $.picture = picture;
            return this;
        }

        public Builder picture(String picture) {
            return picture(Output.of(picture));
        }

        /**
         * @param roles Set(String). Set of IDs of roles assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Set(String). Set of IDs of roles assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Set(String). Set of IDs of roles assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param userId String. ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId String. ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param userMetadata String, JSON format. Custom fields that store info about the user that does not impact a user&#39;s core functionality. Examples include work address, home address, and user preferences.
         * 
         * @return builder
         * 
         */
        public Builder userMetadata(@Nullable Output<String> userMetadata) {
            $.userMetadata = userMetadata;
            return this;
        }

        /**
         * @param userMetadata String, JSON format. Custom fields that store info about the user that does not impact a user&#39;s core functionality. Examples include work address, home address, and user preferences.
         * 
         * @return builder
         * 
         */
        public Builder userMetadata(String userMetadata) {
            return userMetadata(Output.of(userMetadata));
        }

        /**
         * @param username String. Username of the user. Only valid if the connection requires a username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username String. Username of the user. Only valid if the connection requires a username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param verifyEmail Boolean. Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
         * 
         * @return builder
         * 
         */
        public Builder verifyEmail(@Nullable Output<Boolean> verifyEmail) {
            $.verifyEmail = verifyEmail;
            return this;
        }

        /**
         * @param verifyEmail Boolean. Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
         * 
         * @return builder
         * 
         */
        public Builder verifyEmail(Boolean verifyEmail) {
            return verifyEmail(Output.of(verifyEmail));
        }

        public UserState build() {
            return $;
        }
    }

}
