// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttackProtectionBruteForceProtectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttackProtectionBruteForceProtectionArgs Empty = new AttackProtectionBruteForceProtectionArgs();

    /**
     * List of trusted IP addresses that will not have attack protection enforced against them.
     * 
     */
    @Import(name="allowlists")
    private @Nullable Output<List<String>> allowlists;

    /**
     * @return List of trusted IP addresses that will not have attack protection enforced against them.
     * 
     */
    public Optional<Output<List<String>>> allowlists() {
        return Optional.ofNullable(this.allowlists);
    }

    /**
     * Whether or not breached password detection is active.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether or not breached password detection is active.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Maximum number of unsuccessful attempts. Only available on public tenants.
     * 
     */
    @Import(name="maxAttempts")
    private @Nullable Output<Integer> maxAttempts;

    /**
     * @return Maximum number of unsuccessful attempts. Only available on public tenants.
     * 
     */
    public Optional<Output<Integer>> maxAttempts() {
        return Optional.ofNullable(this.maxAttempts);
    }

    /**
     * Determines whether or not IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` or `count_per_identifier`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Determines whether or not IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` or `count_per_identifier`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Action to take when a breached password is detected. Possible values: `block`, `user_notification`, `admin_notification`.
     * 
     */
    @Import(name="shields")
    private @Nullable Output<List<String>> shields;

    /**
     * @return Action to take when a breached password is detected. Possible values: `block`, `user_notification`, `admin_notification`.
     * 
     */
    public Optional<Output<List<String>>> shields() {
        return Optional.ofNullable(this.shields);
    }

    private AttackProtectionBruteForceProtectionArgs() {}

    private AttackProtectionBruteForceProtectionArgs(AttackProtectionBruteForceProtectionArgs $) {
        this.allowlists = $.allowlists;
        this.enabled = $.enabled;
        this.maxAttempts = $.maxAttempts;
        this.mode = $.mode;
        this.shields = $.shields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttackProtectionBruteForceProtectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttackProtectionBruteForceProtectionArgs $;

        public Builder() {
            $ = new AttackProtectionBruteForceProtectionArgs();
        }

        public Builder(AttackProtectionBruteForceProtectionArgs defaults) {
            $ = new AttackProtectionBruteForceProtectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(@Nullable Output<List<String>> allowlists) {
            $.allowlists = allowlists;
            return this;
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(List<String> allowlists) {
            return allowlists(Output.of(allowlists));
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(String... allowlists) {
            return allowlists(List.of(allowlists));
        }

        /**
         * @param enabled Whether or not breached password detection is active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not breached password detection is active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param maxAttempts Maximum number of unsuccessful attempts. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder maxAttempts(@Nullable Output<Integer> maxAttempts) {
            $.maxAttempts = maxAttempts;
            return this;
        }

        /**
         * @param maxAttempts Maximum number of unsuccessful attempts. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder maxAttempts(Integer maxAttempts) {
            return maxAttempts(Output.of(maxAttempts));
        }

        /**
         * @param mode Determines whether or not IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` or `count_per_identifier`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Determines whether or not IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` or `count_per_identifier`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param shields Action to take when a breached password is detected. Possible values: `block`, `user_notification`, `admin_notification`.
         * 
         * @return builder
         * 
         */
        public Builder shields(@Nullable Output<List<String>> shields) {
            $.shields = shields;
            return this;
        }

        /**
         * @param shields Action to take when a breached password is detected. Possible values: `block`, `user_notification`, `admin_notification`.
         * 
         * @return builder
         * 
         */
        public Builder shields(List<String> shields) {
            return shields(Output.of(shields));
        }

        /**
         * @param shields Action to take when a breached password is detected. Possible values: `block`, `user_notification`, `admin_notification`.
         * 
         * @return builder
         * 
         */
        public Builder shields(String... shields) {
            return shields(List.of(shields));
        }

        public AttackProtectionBruteForceProtectionArgs build() {
            return $;
        }
    }

}
