// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TenantFlags {
    /**
     * @return Boolean. Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false).
     * 
     */
    private final @Nullable Boolean allowLegacyDelegationGrantTypes;
    /**
     * @return Boolean. Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false).
     * 
     */
    private final @Nullable Boolean allowLegacyRoGrantTypes;
    /**
     * @return Boolean. If enabled, customers can use Tokeninfo Endpoint, otherwise they can not use it.
     * 
     */
    private final @Nullable Boolean allowLegacyTokeninfoEndpoint;
    /**
     * @return Boolean. Enables new insights activity page view.
     * 
     */
    private final @Nullable Boolean dashboardInsightsView;
    /**
     * @return Boolean. Enables beta access to log streaming changes.
     * 
     */
    private final @Nullable Boolean dashboardLogStreamsNext;
    /**
     * @return Boolean. Indicated whether classic Universal Login prompts include additional security headers to prevent clickjacking.
     * 
     */
    private final @Nullable Boolean disableClickjackProtectionHeaders;
    /**
     * @return Boolean. Disables SAML fields map fix for bad mappings with repeated attributes.
     * 
     */
    private final @Nullable Boolean disableFieldsMapFix;
    /**
     * @return Boolean. If true, SMS phone numbers will not be obfuscated in Management API GET calls.
     * 
     */
    private final @Nullable Boolean disableManagementApiSmsObfuscation;
    /**
     * @return Boolean. If enabled, users will be presented with an email verification prompt during their first login when using Azure AD or ADFS connections.
     * 
     */
    private final @Nullable Boolean enableAdfsWaadEmailVerification;
    /**
     * @return Boolean. Indicates whether the APIs section is enabled for the tenant.
     * 
     */
    private final @Nullable Boolean enableApisSection;
    /**
     * @return Boolean. Indicates whether all current connections should be enabled when a new client is created.
     * 
     */
    private final @Nullable Boolean enableClientConnections;
    /**
     * @return Boolean. Indicates whether the tenant allows custom domains in emails.
     * 
     */
    private final @Nullable Boolean enableCustomDomainInEmails;
    /**
     * @return Boolean. Indicates whether the tenant allows dynamic client registration.
     * 
     */
    private final @Nullable Boolean enableDynamicClientRegistration;
    /**
     * @return Boolean. Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false).
     * 
     */
    private final @Nullable Boolean enableIdtokenApi2;
    /**
     * @return Boolean. Indicates whether to use the older v2 legacy logs search.
     * 
     */
    private final @Nullable Boolean enableLegacyLogsSearchV2;
    /**
     * @return Boolean. Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).
     * 
     */
    private final @Nullable Boolean enableLegacyProfile;
    /**
     * @return Boolean. Indicates whether advanced API Authorization scenarios are enabled.
     * 
     */
    private final @Nullable Boolean enablePipeline2;
    /**
     * @return Boolean. Indicates whether the public sign up process shows a user_exists error if the user already exists.
     * 
     */
    private final @Nullable Boolean enablePublicSignupUserExistsError;
    /**
     * @return Boolean. Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.
     * 
     */
    private final @Nullable Boolean noDiscloseEnterpriseConnections;
    /**
     * @return Boolean. Delete underlying grant when a Refresh Token is revoked via the Authentication API.
     * 
     */
    private final @Nullable Boolean revokeRefreshTokenGrant;
    /**
     * @return Boolean. Indicates whether the tenant uses universal login.
     * 
     */
    private final @Nullable Boolean universalLogin;
    private final @Nullable Boolean useScopeDescriptionsForConsent;

    @CustomType.Constructor
    private TenantFlags(
        @CustomType.Parameter("allowLegacyDelegationGrantTypes") @Nullable Boolean allowLegacyDelegationGrantTypes,
        @CustomType.Parameter("allowLegacyRoGrantTypes") @Nullable Boolean allowLegacyRoGrantTypes,
        @CustomType.Parameter("allowLegacyTokeninfoEndpoint") @Nullable Boolean allowLegacyTokeninfoEndpoint,
        @CustomType.Parameter("dashboardInsightsView") @Nullable Boolean dashboardInsightsView,
        @CustomType.Parameter("dashboardLogStreamsNext") @Nullable Boolean dashboardLogStreamsNext,
        @CustomType.Parameter("disableClickjackProtectionHeaders") @Nullable Boolean disableClickjackProtectionHeaders,
        @CustomType.Parameter("disableFieldsMapFix") @Nullable Boolean disableFieldsMapFix,
        @CustomType.Parameter("disableManagementApiSmsObfuscation") @Nullable Boolean disableManagementApiSmsObfuscation,
        @CustomType.Parameter("enableAdfsWaadEmailVerification") @Nullable Boolean enableAdfsWaadEmailVerification,
        @CustomType.Parameter("enableApisSection") @Nullable Boolean enableApisSection,
        @CustomType.Parameter("enableClientConnections") @Nullable Boolean enableClientConnections,
        @CustomType.Parameter("enableCustomDomainInEmails") @Nullable Boolean enableCustomDomainInEmails,
        @CustomType.Parameter("enableDynamicClientRegistration") @Nullable Boolean enableDynamicClientRegistration,
        @CustomType.Parameter("enableIdtokenApi2") @Nullable Boolean enableIdtokenApi2,
        @CustomType.Parameter("enableLegacyLogsSearchV2") @Nullable Boolean enableLegacyLogsSearchV2,
        @CustomType.Parameter("enableLegacyProfile") @Nullable Boolean enableLegacyProfile,
        @CustomType.Parameter("enablePipeline2") @Nullable Boolean enablePipeline2,
        @CustomType.Parameter("enablePublicSignupUserExistsError") @Nullable Boolean enablePublicSignupUserExistsError,
        @CustomType.Parameter("noDiscloseEnterpriseConnections") @Nullable Boolean noDiscloseEnterpriseConnections,
        @CustomType.Parameter("revokeRefreshTokenGrant") @Nullable Boolean revokeRefreshTokenGrant,
        @CustomType.Parameter("universalLogin") @Nullable Boolean universalLogin,
        @CustomType.Parameter("useScopeDescriptionsForConsent") @Nullable Boolean useScopeDescriptionsForConsent) {
        this.allowLegacyDelegationGrantTypes = allowLegacyDelegationGrantTypes;
        this.allowLegacyRoGrantTypes = allowLegacyRoGrantTypes;
        this.allowLegacyTokeninfoEndpoint = allowLegacyTokeninfoEndpoint;
        this.dashboardInsightsView = dashboardInsightsView;
        this.dashboardLogStreamsNext = dashboardLogStreamsNext;
        this.disableClickjackProtectionHeaders = disableClickjackProtectionHeaders;
        this.disableFieldsMapFix = disableFieldsMapFix;
        this.disableManagementApiSmsObfuscation = disableManagementApiSmsObfuscation;
        this.enableAdfsWaadEmailVerification = enableAdfsWaadEmailVerification;
        this.enableApisSection = enableApisSection;
        this.enableClientConnections = enableClientConnections;
        this.enableCustomDomainInEmails = enableCustomDomainInEmails;
        this.enableDynamicClientRegistration = enableDynamicClientRegistration;
        this.enableIdtokenApi2 = enableIdtokenApi2;
        this.enableLegacyLogsSearchV2 = enableLegacyLogsSearchV2;
        this.enableLegacyProfile = enableLegacyProfile;
        this.enablePipeline2 = enablePipeline2;
        this.enablePublicSignupUserExistsError = enablePublicSignupUserExistsError;
        this.noDiscloseEnterpriseConnections = noDiscloseEnterpriseConnections;
        this.revokeRefreshTokenGrant = revokeRefreshTokenGrant;
        this.universalLogin = universalLogin;
        this.useScopeDescriptionsForConsent = useScopeDescriptionsForConsent;
    }

    /**
     * @return Boolean. Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false).
     * 
     */
    public Optional<Boolean> allowLegacyDelegationGrantTypes() {
        return Optional.ofNullable(this.allowLegacyDelegationGrantTypes);
    }
    /**
     * @return Boolean. Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false).
     * 
     */
    public Optional<Boolean> allowLegacyRoGrantTypes() {
        return Optional.ofNullable(this.allowLegacyRoGrantTypes);
    }
    /**
     * @return Boolean. If enabled, customers can use Tokeninfo Endpoint, otherwise they can not use it.
     * 
     */
    public Optional<Boolean> allowLegacyTokeninfoEndpoint() {
        return Optional.ofNullable(this.allowLegacyTokeninfoEndpoint);
    }
    /**
     * @return Boolean. Enables new insights activity page view.
     * 
     */
    public Optional<Boolean> dashboardInsightsView() {
        return Optional.ofNullable(this.dashboardInsightsView);
    }
    /**
     * @return Boolean. Enables beta access to log streaming changes.
     * 
     */
    public Optional<Boolean> dashboardLogStreamsNext() {
        return Optional.ofNullable(this.dashboardLogStreamsNext);
    }
    /**
     * @return Boolean. Indicated whether classic Universal Login prompts include additional security headers to prevent clickjacking.
     * 
     */
    public Optional<Boolean> disableClickjackProtectionHeaders() {
        return Optional.ofNullable(this.disableClickjackProtectionHeaders);
    }
    /**
     * @return Boolean. Disables SAML fields map fix for bad mappings with repeated attributes.
     * 
     */
    public Optional<Boolean> disableFieldsMapFix() {
        return Optional.ofNullable(this.disableFieldsMapFix);
    }
    /**
     * @return Boolean. If true, SMS phone numbers will not be obfuscated in Management API GET calls.
     * 
     */
    public Optional<Boolean> disableManagementApiSmsObfuscation() {
        return Optional.ofNullable(this.disableManagementApiSmsObfuscation);
    }
    /**
     * @return Boolean. If enabled, users will be presented with an email verification prompt during their first login when using Azure AD or ADFS connections.
     * 
     */
    public Optional<Boolean> enableAdfsWaadEmailVerification() {
        return Optional.ofNullable(this.enableAdfsWaadEmailVerification);
    }
    /**
     * @return Boolean. Indicates whether the APIs section is enabled for the tenant.
     * 
     */
    public Optional<Boolean> enableApisSection() {
        return Optional.ofNullable(this.enableApisSection);
    }
    /**
     * @return Boolean. Indicates whether all current connections should be enabled when a new client is created.
     * 
     */
    public Optional<Boolean> enableClientConnections() {
        return Optional.ofNullable(this.enableClientConnections);
    }
    /**
     * @return Boolean. Indicates whether the tenant allows custom domains in emails.
     * 
     */
    public Optional<Boolean> enableCustomDomainInEmails() {
        return Optional.ofNullable(this.enableCustomDomainInEmails);
    }
    /**
     * @return Boolean. Indicates whether the tenant allows dynamic client registration.
     * 
     */
    public Optional<Boolean> enableDynamicClientRegistration() {
        return Optional.ofNullable(this.enableDynamicClientRegistration);
    }
    /**
     * @return Boolean. Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false).
     * 
     */
    public Optional<Boolean> enableIdtokenApi2() {
        return Optional.ofNullable(this.enableIdtokenApi2);
    }
    /**
     * @return Boolean. Indicates whether to use the older v2 legacy logs search.
     * 
     */
    public Optional<Boolean> enableLegacyLogsSearchV2() {
        return Optional.ofNullable(this.enableLegacyLogsSearchV2);
    }
    /**
     * @return Boolean. Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).
     * 
     */
    public Optional<Boolean> enableLegacyProfile() {
        return Optional.ofNullable(this.enableLegacyProfile);
    }
    /**
     * @return Boolean. Indicates whether advanced API Authorization scenarios are enabled.
     * 
     */
    public Optional<Boolean> enablePipeline2() {
        return Optional.ofNullable(this.enablePipeline2);
    }
    /**
     * @return Boolean. Indicates whether the public sign up process shows a user_exists error if the user already exists.
     * 
     */
    public Optional<Boolean> enablePublicSignupUserExistsError() {
        return Optional.ofNullable(this.enablePublicSignupUserExistsError);
    }
    /**
     * @return Boolean. Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.
     * 
     */
    public Optional<Boolean> noDiscloseEnterpriseConnections() {
        return Optional.ofNullable(this.noDiscloseEnterpriseConnections);
    }
    /**
     * @return Boolean. Delete underlying grant when a Refresh Token is revoked via the Authentication API.
     * 
     */
    public Optional<Boolean> revokeRefreshTokenGrant() {
        return Optional.ofNullable(this.revokeRefreshTokenGrant);
    }
    /**
     * @return Boolean. Indicates whether the tenant uses universal login.
     * 
     */
    public Optional<Boolean> universalLogin() {
        return Optional.ofNullable(this.universalLogin);
    }
    public Optional<Boolean> useScopeDescriptionsForConsent() {
        return Optional.ofNullable(this.useScopeDescriptionsForConsent);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TenantFlags defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowLegacyDelegationGrantTypes;
        private @Nullable Boolean allowLegacyRoGrantTypes;
        private @Nullable Boolean allowLegacyTokeninfoEndpoint;
        private @Nullable Boolean dashboardInsightsView;
        private @Nullable Boolean dashboardLogStreamsNext;
        private @Nullable Boolean disableClickjackProtectionHeaders;
        private @Nullable Boolean disableFieldsMapFix;
        private @Nullable Boolean disableManagementApiSmsObfuscation;
        private @Nullable Boolean enableAdfsWaadEmailVerification;
        private @Nullable Boolean enableApisSection;
        private @Nullable Boolean enableClientConnections;
        private @Nullable Boolean enableCustomDomainInEmails;
        private @Nullable Boolean enableDynamicClientRegistration;
        private @Nullable Boolean enableIdtokenApi2;
        private @Nullable Boolean enableLegacyLogsSearchV2;
        private @Nullable Boolean enableLegacyProfile;
        private @Nullable Boolean enablePipeline2;
        private @Nullable Boolean enablePublicSignupUserExistsError;
        private @Nullable Boolean noDiscloseEnterpriseConnections;
        private @Nullable Boolean revokeRefreshTokenGrant;
        private @Nullable Boolean universalLogin;
        private @Nullable Boolean useScopeDescriptionsForConsent;

        public Builder() {
    	      // Empty
        }

        public Builder(TenantFlags defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLegacyDelegationGrantTypes = defaults.allowLegacyDelegationGrantTypes;
    	      this.allowLegacyRoGrantTypes = defaults.allowLegacyRoGrantTypes;
    	      this.allowLegacyTokeninfoEndpoint = defaults.allowLegacyTokeninfoEndpoint;
    	      this.dashboardInsightsView = defaults.dashboardInsightsView;
    	      this.dashboardLogStreamsNext = defaults.dashboardLogStreamsNext;
    	      this.disableClickjackProtectionHeaders = defaults.disableClickjackProtectionHeaders;
    	      this.disableFieldsMapFix = defaults.disableFieldsMapFix;
    	      this.disableManagementApiSmsObfuscation = defaults.disableManagementApiSmsObfuscation;
    	      this.enableAdfsWaadEmailVerification = defaults.enableAdfsWaadEmailVerification;
    	      this.enableApisSection = defaults.enableApisSection;
    	      this.enableClientConnections = defaults.enableClientConnections;
    	      this.enableCustomDomainInEmails = defaults.enableCustomDomainInEmails;
    	      this.enableDynamicClientRegistration = defaults.enableDynamicClientRegistration;
    	      this.enableIdtokenApi2 = defaults.enableIdtokenApi2;
    	      this.enableLegacyLogsSearchV2 = defaults.enableLegacyLogsSearchV2;
    	      this.enableLegacyProfile = defaults.enableLegacyProfile;
    	      this.enablePipeline2 = defaults.enablePipeline2;
    	      this.enablePublicSignupUserExistsError = defaults.enablePublicSignupUserExistsError;
    	      this.noDiscloseEnterpriseConnections = defaults.noDiscloseEnterpriseConnections;
    	      this.revokeRefreshTokenGrant = defaults.revokeRefreshTokenGrant;
    	      this.universalLogin = defaults.universalLogin;
    	      this.useScopeDescriptionsForConsent = defaults.useScopeDescriptionsForConsent;
        }

        public Builder allowLegacyDelegationGrantTypes(@Nullable Boolean allowLegacyDelegationGrantTypes) {
            this.allowLegacyDelegationGrantTypes = allowLegacyDelegationGrantTypes;
            return this;
        }
        public Builder allowLegacyRoGrantTypes(@Nullable Boolean allowLegacyRoGrantTypes) {
            this.allowLegacyRoGrantTypes = allowLegacyRoGrantTypes;
            return this;
        }
        public Builder allowLegacyTokeninfoEndpoint(@Nullable Boolean allowLegacyTokeninfoEndpoint) {
            this.allowLegacyTokeninfoEndpoint = allowLegacyTokeninfoEndpoint;
            return this;
        }
        public Builder dashboardInsightsView(@Nullable Boolean dashboardInsightsView) {
            this.dashboardInsightsView = dashboardInsightsView;
            return this;
        }
        public Builder dashboardLogStreamsNext(@Nullable Boolean dashboardLogStreamsNext) {
            this.dashboardLogStreamsNext = dashboardLogStreamsNext;
            return this;
        }
        public Builder disableClickjackProtectionHeaders(@Nullable Boolean disableClickjackProtectionHeaders) {
            this.disableClickjackProtectionHeaders = disableClickjackProtectionHeaders;
            return this;
        }
        public Builder disableFieldsMapFix(@Nullable Boolean disableFieldsMapFix) {
            this.disableFieldsMapFix = disableFieldsMapFix;
            return this;
        }
        public Builder disableManagementApiSmsObfuscation(@Nullable Boolean disableManagementApiSmsObfuscation) {
            this.disableManagementApiSmsObfuscation = disableManagementApiSmsObfuscation;
            return this;
        }
        public Builder enableAdfsWaadEmailVerification(@Nullable Boolean enableAdfsWaadEmailVerification) {
            this.enableAdfsWaadEmailVerification = enableAdfsWaadEmailVerification;
            return this;
        }
        public Builder enableApisSection(@Nullable Boolean enableApisSection) {
            this.enableApisSection = enableApisSection;
            return this;
        }
        public Builder enableClientConnections(@Nullable Boolean enableClientConnections) {
            this.enableClientConnections = enableClientConnections;
            return this;
        }
        public Builder enableCustomDomainInEmails(@Nullable Boolean enableCustomDomainInEmails) {
            this.enableCustomDomainInEmails = enableCustomDomainInEmails;
            return this;
        }
        public Builder enableDynamicClientRegistration(@Nullable Boolean enableDynamicClientRegistration) {
            this.enableDynamicClientRegistration = enableDynamicClientRegistration;
            return this;
        }
        public Builder enableIdtokenApi2(@Nullable Boolean enableIdtokenApi2) {
            this.enableIdtokenApi2 = enableIdtokenApi2;
            return this;
        }
        public Builder enableLegacyLogsSearchV2(@Nullable Boolean enableLegacyLogsSearchV2) {
            this.enableLegacyLogsSearchV2 = enableLegacyLogsSearchV2;
            return this;
        }
        public Builder enableLegacyProfile(@Nullable Boolean enableLegacyProfile) {
            this.enableLegacyProfile = enableLegacyProfile;
            return this;
        }
        public Builder enablePipeline2(@Nullable Boolean enablePipeline2) {
            this.enablePipeline2 = enablePipeline2;
            return this;
        }
        public Builder enablePublicSignupUserExistsError(@Nullable Boolean enablePublicSignupUserExistsError) {
            this.enablePublicSignupUserExistsError = enablePublicSignupUserExistsError;
            return this;
        }
        public Builder noDiscloseEnterpriseConnections(@Nullable Boolean noDiscloseEnterpriseConnections) {
            this.noDiscloseEnterpriseConnections = noDiscloseEnterpriseConnections;
            return this;
        }
        public Builder revokeRefreshTokenGrant(@Nullable Boolean revokeRefreshTokenGrant) {
            this.revokeRefreshTokenGrant = revokeRefreshTokenGrant;
            return this;
        }
        public Builder universalLogin(@Nullable Boolean universalLogin) {
            this.universalLogin = universalLogin;
            return this;
        }
        public Builder useScopeDescriptionsForConsent(@Nullable Boolean useScopeDescriptionsForConsent) {
            this.useScopeDescriptionsForConsent = useScopeDescriptionsForConsent;
            return this;
        }        public TenantFlags build() {
            return new TenantFlags(allowLegacyDelegationGrantTypes, allowLegacyRoGrantTypes, allowLegacyTokeninfoEndpoint, dashboardInsightsView, dashboardLogStreamsNext, disableClickjackProtectionHeaders, disableFieldsMapFix, disableManagementApiSmsObfuscation, enableAdfsWaadEmailVerification, enableApisSection, enableClientConnections, enableCustomDomainInEmails, enableDynamicClientRegistration, enableIdtokenApi2, enableLegacyLogsSearchV2, enableLegacyProfile, enablePipeline2, enablePublicSignupUserExistsError, noDiscloseEnterpriseConnections, revokeRefreshTokenGrant, universalLogin, useScopeDescriptionsForConsent);
        }
    }
}
