// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.GuardianDuoArgs;
import com.pulumi.auth0.inputs.GuardianPhoneArgs;
import com.pulumi.auth0.inputs.GuardianPushArgs;
import com.pulumi.auth0.inputs.GuardianWebauthnPlatformArgs;
import com.pulumi.auth0.inputs.GuardianWebauthnRoamingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GuardianState extends com.pulumi.resources.ResourceArgs {

    public static final GuardianState Empty = new GuardianState();

    /**
     * List(Resource). Configuration settings for the Duo MFA.
     * If this block is present, Duo MFA will be enabled, and disabled otherwise. For details, see Duo.
     * 
     */
    @Import(name="duo")
    private @Nullable Output<GuardianDuoArgs> duo;

    /**
     * @return List(Resource). Configuration settings for the Duo MFA.
     * If this block is present, Duo MFA will be enabled, and disabled otherwise. For details, see Duo.
     * 
     */
    public Optional<Output<GuardianDuoArgs>> duo() {
        return Optional.ofNullable(this.duo);
    }

    /**
     * Boolean. Indicates whether email MFA is enabled.
     * 
     */
    @Import(name="email")
    private @Nullable Output<Boolean> email;

    /**
     * @return Boolean. Indicates whether email MFA is enabled.
     * 
     */
    public Optional<Output<Boolean>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Boolean. Indicates whether one time password MFA is enabled.
     * 
     */
    @Import(name="otp")
    private @Nullable Output<Boolean> otp;

    /**
     * @return Boolean. Indicates whether one time password MFA is enabled.
     * 
     */
    public Optional<Output<Boolean>> otp() {
        return Optional.ofNullable(this.otp);
    }

    /**
     * List(Resource). Configuration settings for the phone MFA.
     * If this block is present, Phone MFA will be enabled, and disabled otherwise. For details, see Phone.
     * 
     */
    @Import(name="phone")
    private @Nullable Output<GuardianPhoneArgs> phone;

    /**
     * @return List(Resource). Configuration settings for the phone MFA.
     * If this block is present, Phone MFA will be enabled, and disabled otherwise. For details, see Phone.
     * 
     */
    public Optional<Output<GuardianPhoneArgs>> phone() {
        return Optional.ofNullable(this.phone);
    }

    /**
     * String. Policy to use. Available options are `never`, `all-applications` and `confidence-score`.
     * The option `confidence-score` means the trigger of MFA will be adaptive. See [Auth0 docs](https://auth0.com/docs/mfa/adaptive-mfa).
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return String. Policy to use. Available options are `never`, `all-applications` and `confidence-score`.
     * The option `confidence-score` means the trigger of MFA will be adaptive. See [Auth0 docs](https://auth0.com/docs/mfa/adaptive-mfa).
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * List(Resource). Configuration settings for the Push MFA.
     * If this block is present, Push MFA will be enabled, and disabled otherwise. For details, see Push.
     * 
     */
    @Import(name="push")
    private @Nullable Output<GuardianPushArgs> push;

    /**
     * @return List(Resource). Configuration settings for the Push MFA.
     * If this block is present, Push MFA will be enabled, and disabled otherwise. For details, see Push.
     * 
     */
    public Optional<Output<GuardianPushArgs>> push() {
        return Optional.ofNullable(this.push);
    }

    /**
     * Boolean. Indicates whether recovery code MFA is enabled.
     * 
     */
    @Import(name="recoveryCode")
    private @Nullable Output<Boolean> recoveryCode;

    /**
     * @return Boolean. Indicates whether recovery code MFA is enabled.
     * 
     */
    public Optional<Output<Boolean>> recoveryCode() {
        return Optional.ofNullable(this.recoveryCode);
    }

    /**
     * List(Resource). Configuration settings for the WebAuthn with FIDO Device Biometrics MFA.
     * If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.
     * For details, see WebAuthn Platform.
     * 
     */
    @Import(name="webauthnPlatform")
    private @Nullable Output<GuardianWebauthnPlatformArgs> webauthnPlatform;

    /**
     * @return List(Resource). Configuration settings for the WebAuthn with FIDO Device Biometrics MFA.
     * If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.
     * For details, see WebAuthn Platform.
     * 
     */
    public Optional<Output<GuardianWebauthnPlatformArgs>> webauthnPlatform() {
        return Optional.ofNullable(this.webauthnPlatform);
    }

    /**
     * List(Resource). Configuration settings for the WebAuthn with FIDO Security Keys MFA.
     * If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.
     * For details, see WebAuthn Roaming.
     * 
     */
    @Import(name="webauthnRoaming")
    private @Nullable Output<GuardianWebauthnRoamingArgs> webauthnRoaming;

    /**
     * @return List(Resource). Configuration settings for the WebAuthn with FIDO Security Keys MFA.
     * If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.
     * For details, see WebAuthn Roaming.
     * 
     */
    public Optional<Output<GuardianWebauthnRoamingArgs>> webauthnRoaming() {
        return Optional.ofNullable(this.webauthnRoaming);
    }

    private GuardianState() {}

    private GuardianState(GuardianState $) {
        this.duo = $.duo;
        this.email = $.email;
        this.otp = $.otp;
        this.phone = $.phone;
        this.policy = $.policy;
        this.push = $.push;
        this.recoveryCode = $.recoveryCode;
        this.webauthnPlatform = $.webauthnPlatform;
        this.webauthnRoaming = $.webauthnRoaming;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GuardianState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GuardianState $;

        public Builder() {
            $ = new GuardianState();
        }

        public Builder(GuardianState defaults) {
            $ = new GuardianState(Objects.requireNonNull(defaults));
        }

        /**
         * @param duo List(Resource). Configuration settings for the Duo MFA.
         * If this block is present, Duo MFA will be enabled, and disabled otherwise. For details, see Duo.
         * 
         * @return builder
         * 
         */
        public Builder duo(@Nullable Output<GuardianDuoArgs> duo) {
            $.duo = duo;
            return this;
        }

        /**
         * @param duo List(Resource). Configuration settings for the Duo MFA.
         * If this block is present, Duo MFA will be enabled, and disabled otherwise. For details, see Duo.
         * 
         * @return builder
         * 
         */
        public Builder duo(GuardianDuoArgs duo) {
            return duo(Output.of(duo));
        }

        /**
         * @param email Boolean. Indicates whether email MFA is enabled.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<Boolean> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Boolean. Indicates whether email MFA is enabled.
         * 
         * @return builder
         * 
         */
        public Builder email(Boolean email) {
            return email(Output.of(email));
        }

        /**
         * @param otp Boolean. Indicates whether one time password MFA is enabled.
         * 
         * @return builder
         * 
         */
        public Builder otp(@Nullable Output<Boolean> otp) {
            $.otp = otp;
            return this;
        }

        /**
         * @param otp Boolean. Indicates whether one time password MFA is enabled.
         * 
         * @return builder
         * 
         */
        public Builder otp(Boolean otp) {
            return otp(Output.of(otp));
        }

        /**
         * @param phone List(Resource). Configuration settings for the phone MFA.
         * If this block is present, Phone MFA will be enabled, and disabled otherwise. For details, see Phone.
         * 
         * @return builder
         * 
         */
        public Builder phone(@Nullable Output<GuardianPhoneArgs> phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param phone List(Resource). Configuration settings for the phone MFA.
         * If this block is present, Phone MFA will be enabled, and disabled otherwise. For details, see Phone.
         * 
         * @return builder
         * 
         */
        public Builder phone(GuardianPhoneArgs phone) {
            return phone(Output.of(phone));
        }

        /**
         * @param policy String. Policy to use. Available options are `never`, `all-applications` and `confidence-score`.
         * The option `confidence-score` means the trigger of MFA will be adaptive. See [Auth0 docs](https://auth0.com/docs/mfa/adaptive-mfa).
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy String. Policy to use. Available options are `never`, `all-applications` and `confidence-score`.
         * The option `confidence-score` means the trigger of MFA will be adaptive. See [Auth0 docs](https://auth0.com/docs/mfa/adaptive-mfa).
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param push List(Resource). Configuration settings for the Push MFA.
         * If this block is present, Push MFA will be enabled, and disabled otherwise. For details, see Push.
         * 
         * @return builder
         * 
         */
        public Builder push(@Nullable Output<GuardianPushArgs> push) {
            $.push = push;
            return this;
        }

        /**
         * @param push List(Resource). Configuration settings for the Push MFA.
         * If this block is present, Push MFA will be enabled, and disabled otherwise. For details, see Push.
         * 
         * @return builder
         * 
         */
        public Builder push(GuardianPushArgs push) {
            return push(Output.of(push));
        }

        /**
         * @param recoveryCode Boolean. Indicates whether recovery code MFA is enabled.
         * 
         * @return builder
         * 
         */
        public Builder recoveryCode(@Nullable Output<Boolean> recoveryCode) {
            $.recoveryCode = recoveryCode;
            return this;
        }

        /**
         * @param recoveryCode Boolean. Indicates whether recovery code MFA is enabled.
         * 
         * @return builder
         * 
         */
        public Builder recoveryCode(Boolean recoveryCode) {
            return recoveryCode(Output.of(recoveryCode));
        }

        /**
         * @param webauthnPlatform List(Resource). Configuration settings for the WebAuthn with FIDO Device Biometrics MFA.
         * If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.
         * For details, see WebAuthn Platform.
         * 
         * @return builder
         * 
         */
        public Builder webauthnPlatform(@Nullable Output<GuardianWebauthnPlatformArgs> webauthnPlatform) {
            $.webauthnPlatform = webauthnPlatform;
            return this;
        }

        /**
         * @param webauthnPlatform List(Resource). Configuration settings for the WebAuthn with FIDO Device Biometrics MFA.
         * If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.
         * For details, see WebAuthn Platform.
         * 
         * @return builder
         * 
         */
        public Builder webauthnPlatform(GuardianWebauthnPlatformArgs webauthnPlatform) {
            return webauthnPlatform(Output.of(webauthnPlatform));
        }

        /**
         * @param webauthnRoaming List(Resource). Configuration settings for the WebAuthn with FIDO Security Keys MFA.
         * If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.
         * For details, see WebAuthn Roaming.
         * 
         * @return builder
         * 
         */
        public Builder webauthnRoaming(@Nullable Output<GuardianWebauthnRoamingArgs> webauthnRoaming) {
            $.webauthnRoaming = webauthnRoaming;
            return this;
        }

        /**
         * @param webauthnRoaming List(Resource). Configuration settings for the WebAuthn with FIDO Security Keys MFA.
         * If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.
         * For details, see WebAuthn Roaming.
         * 
         * @return builder
         * 
         */
        public Builder webauthnRoaming(GuardianWebauthnRoamingArgs webauthnRoaming) {
            return webauthnRoaming(Output.of(webauthnRoaming));
        }

        public GuardianState build() {
            return $;
        }
    }

}
