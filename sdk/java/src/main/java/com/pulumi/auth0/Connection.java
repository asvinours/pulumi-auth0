// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.ConnectionArgs;
import com.pulumi.auth0.Utilities;
import com.pulumi.auth0.inputs.ConnectionState;
import com.pulumi.auth0.outputs.ConnectionOptions;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers
 * (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure
 * and manage connections to be used with your clients and users.
 * 
 * ## Import
 * 
 * Connections can be imported using their id, e.g.
 * 
 * ```sh
 *  $ pulumi import auth0:index/connection:Connection google con_a17f21fdb24d48a0
 * ```
 * 
 */
@ResourceType(type="auth0:index/connection:Connection")
public class Connection extends com.pulumi.resources.CustomResource {
    /**
     * Name used in login screen
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Name used in login screen
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * IDs of the clients for which the connection is enabled. If not specified, no clients are enabled.
     * 
     */
    @Export(name="enabledClients", type=List.class, parameters={String.class})
    private Output<List<String>> enabledClients;

    /**
     * @return IDs of the clients for which the connection is enabled. If not specified, no clients are enabled.
     * 
     */
    public Output<List<String>> enabledClients() {
        return this.enabledClients;
    }
    /**
     * Indicates whether the connection is domain level.
     * 
     */
    @Export(name="isDomainConnection", type=Boolean.class, parameters={})
    private Output<Boolean> isDomainConnection;

    /**
     * @return Indicates whether the connection is domain level.
     * 
     */
    public Output<Boolean> isDomainConnection() {
        return this.isDomainConnection;
    }
    /**
     * Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.
     * 
     */
    @Export(name="metadata", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> metadata;

    /**
     * @return Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.
     * 
     */
    public Output<Optional<Map<String,String>>> metadata() {
        return Codegen.optional(this.metadata);
    }
    /**
     * Name of the connection.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the connection.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Configuration settings for connection options. For details, see Options.
     * 
     */
    @Export(name="options", type=ConnectionOptions.class, parameters={})
    private Output<ConnectionOptions> options;

    /**
     * @return Configuration settings for connection options. For details, see Options.
     * 
     */
    public Output<ConnectionOptions> options() {
        return this.options;
    }
    /**
     * Defines the realms for which the connection will be used (i.e., email domains). If not specified, the connection name is added as the realm.
     * 
     */
    @Export(name="realms", type=List.class, parameters={String.class})
    private Output<List<String>> realms;

    /**
     * @return Defines the realms for which the connection will be used (i.e., email domains). If not specified, the connection name is added as the realm.
     * 
     */
    public Output<List<String>> realms() {
        return this.realms;
    }
    /**
     * Display connection as a button. Only available for enterprise connections.
     * 
     */
    @Export(name="showAsButton", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> showAsButton;

    /**
     * @return Display connection as a button. Only available for enterprise connections.
     * 
     */
    public Output<Optional<Boolean>> showAsButton() {
        return Codegen.optional(this.showAsButton);
    }
    /**
     * Type of the connection, which indicates the identity provider. Options include `ad`, `adfs`, `amazon`, `aol`, `apple`, `auth0`, `auth0-adldap`, `auth0-oidc`, `baidu`, `bitbucket`, `bitly`, `box`, `custom`, `daccount`, `dropbox`, `dwolla`, `email`, `evernote`, `evernote-sandbox`, `exact`, `facebook`, `fitbit`, `flickr`, `github`, `google-apps`, `google-oauth2`, `guardian`, `instagram`, `ip`, `line`, `linkedin`, `miicard`, `oauth1`, `oauth2`, `office365`, `oidc`, `paypal`, `paypal-sandbox`, `pingfederate`, `planningcenter`, `renren`, `salesforce`, `salesforce-community`, `salesforce-sandbox` `samlp`, `sharepoint`, `shopify`, `sms`, `soundcloud`, `thecity`, `thecity-sandbox`, `thirtysevensignals`, `twitter`, `untappd`, `vkontakte`, `waad`, `weibo`, `windowslive`, `wordpress`, `yahoo`, `yammer`, `yandex`.
     * 
     */
    @Export(name="strategy", type=String.class, parameters={})
    private Output<String> strategy;

    /**
     * @return Type of the connection, which indicates the identity provider. Options include `ad`, `adfs`, `amazon`, `aol`, `apple`, `auth0`, `auth0-adldap`, `auth0-oidc`, `baidu`, `bitbucket`, `bitly`, `box`, `custom`, `daccount`, `dropbox`, `dwolla`, `email`, `evernote`, `evernote-sandbox`, `exact`, `facebook`, `fitbit`, `flickr`, `github`, `google-apps`, `google-oauth2`, `guardian`, `instagram`, `ip`, `line`, `linkedin`, `miicard`, `oauth1`, `oauth2`, `office365`, `oidc`, `paypal`, `paypal-sandbox`, `pingfederate`, `planningcenter`, `renren`, `salesforce`, `salesforce-community`, `salesforce-sandbox` `samlp`, `sharepoint`, `shopify`, `sms`, `soundcloud`, `thecity`, `thecity-sandbox`, `thirtysevensignals`, `twitter`, `untappd`, `vkontakte`, `waad`, `weibo`, `windowslive`, `wordpress`, `yahoo`, `yammer`, `yandex`.
     * 
     */
    public Output<String> strategy() {
        return this.strategy;
    }
    /**
     * Version 1 is deprecated, use version 2.
     * 
     */
    @Export(name="strategyVersion", type=String.class, parameters={})
    private Output<String> strategyVersion;

    /**
     * @return Version 1 is deprecated, use version 2.
     * 
     */
    public Output<String> strategyVersion() {
        return this.strategyVersion;
    }
    /**
     * Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
     * 
     */
    @Export(name="validation", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> validation;

    /**
     * @return Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
     * 
     */
    public Output<Optional<Map<String,String>>> validation() {
        return Codegen.optional(this.validation);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connection(String name) {
        this(name, ConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connection(String name, ConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connection(String name, ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/connection:Connection", name, args == null ? ConnectionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Connection(String name, Output<String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/connection:Connection", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connection get(String name, Output<String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Connection(name, id, state, options);
    }
}
