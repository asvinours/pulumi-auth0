// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationConnectionArgs Empty = new OrganizationConnectionArgs();

    /**
     * When true, all users that log in
     * with this connection will be automatically granted membership in the
     * organization. When false, users must be granted membership in the organization
     * before logging in with this connection.
     * 
     */
    @Import(name="assignMembershipOnLogin")
    private @Nullable Output<Boolean> assignMembershipOnLogin;

    /**
     * @return When true, all users that log in
     * with this connection will be automatically granted membership in the
     * organization. When false, users must be granted membership in the organization
     * before logging in with this connection.
     * 
     */
    public Optional<Output<Boolean>> assignMembershipOnLogin() {
        return Optional.ofNullable(this.assignMembershipOnLogin);
    }

    /**
     * The connection ID of the connection to add to the
     * organization
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return The connection ID of the connection to add to the
     * organization
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    private OrganizationConnectionArgs() {}

    private OrganizationConnectionArgs(OrganizationConnectionArgs $) {
        this.assignMembershipOnLogin = $.assignMembershipOnLogin;
        this.connectionId = $.connectionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationConnectionArgs $;

        public Builder() {
            $ = new OrganizationConnectionArgs();
        }

        public Builder(OrganizationConnectionArgs defaults) {
            $ = new OrganizationConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignMembershipOnLogin When true, all users that log in
         * with this connection will be automatically granted membership in the
         * organization. When false, users must be granted membership in the organization
         * before logging in with this connection.
         * 
         * @return builder
         * 
         */
        public Builder assignMembershipOnLogin(@Nullable Output<Boolean> assignMembershipOnLogin) {
            $.assignMembershipOnLogin = assignMembershipOnLogin;
            return this;
        }

        /**
         * @param assignMembershipOnLogin When true, all users that log in
         * with this connection will be automatically granted membership in the
         * organization. When false, users must be granted membership in the organization
         * before logging in with this connection.
         * 
         * @return builder
         * 
         */
        public Builder assignMembershipOnLogin(Boolean assignMembershipOnLogin) {
            return assignMembershipOnLogin(Output.of(assignMembershipOnLogin));
        }

        /**
         * @param connectionId The connection ID of the connection to add to the
         * organization
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId The connection ID of the connection to add to the
         * organization
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        public OrganizationConnectionArgs build() {
            $.connectionId = Objects.requireNonNull($.connectionId, "expected parameter 'connectionId' to be non-null");
            return $;
        }
    }

}
